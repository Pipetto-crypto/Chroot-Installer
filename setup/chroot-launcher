#!/bin/bash

#Variables

CONFIG_DIR=~/.chroot_installer
LAST_ARGUMENT=$(echo "$@" | awk '{ print $NF }')
CHROOT_DIR=/data/local/mnt
INTERNAL_STORAGE=/sdcard
ANDROIDVERSION=$(getprop ro.build.version.release)
index=1
for var in "$@"
do
    argslist[$index]=$var
    index=$((index+1))
done



#check if busybox is available and if not exit

if [[ "$(su -c busybox)" =~ "not found" ]]
  then
      echo "Busybox not found, install busybox if you want to be able to launch your chroot"
      exit 0
  fi

#check if Android Version is 12 and set max phantom processes
if [ "$ANDROIDVERSION" == "12" ]
then
	if ! su -c device_config get activity_manager max_phantom_processes | grep -q "2147483647"
	then
		su -c device_config put activity_manager max_phantom_processes 2147483647
	fi
fi		


#check if external storage is present
if [ -n "$(sudo ls -A /mnt/media_rw)" ]
then
	EXTERNAL_STORAGE=/mnt/media_rw/$(sudo ls /mnt/media_rw)
fi


#This function contains the commands required to start a Xwayland server which the chroot can connect to.

xwayland(){

echo "Creating the socket"

sudo mkdir -p $CHROOT_DIR/tmp/runtime-$USERNAME
su -c busybox chroot $CHROOT_DIR /usr/bin/sudo -u root -i "chown $USERNAME:$USERNAME /tmp/runtime-$USERNAME"
taskset -c 4-7 termux-x11 &  
sleep 20
sudo touch $CHROOT_DIR/tmp/runtime-$USERNAME/wayland-0
sudo busybox mount --bind $TMPDIR/wayland-0 $CHROOT_DIR/tmp/runtime-$USERNAME/wayland-0
sudo chmod a+rwx $CHROOT_DIR/tmp/runtime-$USERNAME/wayland-0

}

#function to update this script
update(){

git clone https://raw.githubusercontent.com/Pipetto-crypto/Chroot-Installer/master/chroot-launcher?token=GHSAT0AAAAAABZCGT55FGO2FJPUZ3DSSD5OY7REUIA
chmod +x chroot_launcher
mv chroot_launcher $PATH
	
}

#function that list installed containers
list-containers(){

for i in $CONFIG_DIR/*
do
	CONTAINER=$(basename -- $i)
	echo "${CONTAINER%.*}"
done
	
}

check_parameters(){

exitcode=1

for i in $1
do
	position=1
	for e in $2
	do
		if [ "$i" == "$e" ]
		then
			exitcode=0
			break 2
		fi
	position=$((position+1))
	done
done

return $exitcode

}

#function that marks one container as default
mark-default(){

for i in $CONFIG_DIR/* #check each file for default flag and remove it
do
	if [ "$(tail -n 1 $i)" == "default" ]
	then
		sed -i '$ d' $i
	fi
done	

echo "default" >> $CONFIG_DIR/$LAST_ARGUMENT.conf
	
}

#function that start the chroot
start(){

containerslist=$(list-containers)

if [ -f $LAST_ARGUMENT  ] || [ -d $LAST_ARGUMENT ] #check if last argument was a file or a directory
then
	INSPATH=$LAST_ARGUMENT
	read -p "What's the username associated with this container: " USERNAME
#check if last argument was start or restart or -w option to know if you didn't provide any container argument
elif ! check_parameters "$containerslist" "${argslist[*]}"
then

	echo -e "The container you provided doesn't exist or you didn't provide any container, attempting to start the default one"
	if (( $(ls -1 $CONFIG_DIR | wc -l ) == 1 )) #check the number of available containers and if there is only one start it
	then
		CONFIG="$CONFIG_DIR/*"
		USERNAME=$(cat $CONFIG | awk -F '='  '/USERNAME/{print $2}')
		INSPATH=$(cat $CONFIG | awk -F '=' '/INSPATH/{print $2}')
		
	else  #if there are more than one container start the default

		DEFAULTFOUND=false
		for i in $CONFIG_DIR/*
		do
			if [ "$(tail -n 1 $i)" == "default" ]
			then
				DEFAULTFOUND=true
				CONFIG="$i"
				USERNAME=$(cat $CONFIG | awk -F '='  '/USERNAME/{print $2}')
				INSPATH=$(cat $CONFIG | awk -F '=' '/INSPATH/{print $2}')
			fi
		done
	fi		
#try to start the container provided by container argument		
else
	CONTAINEREXIST=false
	for i in $containerslist
	do   #check if the container argument provided is in the container list
		if [ "$LAST_ARGUMENT" == "$i" ] 
		then
			CONTAINEREXIST=true
		fi
	done 
	if [ "$CONTAINEREXIST" == "true" ] 
	then
		CONFIG="$CONFIG_DIR/$LAST_ARGUMENT.conf"
		USERNAME=$(cat $CONFIG | awk -F '='  '/USERNAME/{print $2}')
		INSPATH=$(cat $CONFIG | awk -F '=' '/INSPATH/{print $2}')
	fi
fi

#check if a default container is found and in case exit
if [ "$DEFAULTFOUND" == "false" ] 
then
    echo -e "No default container found, mark one as default or start with a container name"
    exit
fi

#check if the container exists and in case exit
if [ "$CONTAINEREXIST" == "false" ]
then 
	echo -e "The container you provided doesn't exist, exiting"
	exit
fi

#check that the container provided is valid and in case exit
if [ "$INSPATH" == "" ]
then
	echo -e "This container seems to be damaged, exiting for safety"
	exit
fi

if [ "$USERNAME" == "" ]
then
      USERNAME=root
fi

if [ -f $INSPATH ]
then
    INSMETHOD="file"
elif [ -d $INSPATH ]
then
	INSMETHOD="folder"
else
	echo -e "The container installation path doesn't seem to exist so I can't launch it, exiting"
	exit
fi

#check if user has prompted for a custom username
if check_parameters "-u" "${argslist[*]}"
then
	USERNAME=${argslist[$((position+1))]}
fi

if [ -d $CHROOT_DIR/home ]
then
    echo "Chroot already mounted, connecting"
    #check if login binary is available else default to an alternative method to access the chroot
    if ls $CHROOT_DIR/bin | grep -q login
    then
    	su -c busybox chroot $CHROOT_DIR /bin/login -f $USERNAME
    	exit
    else
    	su -c busybox chroot $CHROOT_DIR /bin/sh
    	exit
    fi
fi
       
#Start audio in the chroot
	echo -e "\nInitializing the audio server"
		pulseaudio --start --exit-idle-time=-1
		pacmd load-module module-native-protocol-tcp auth-ip-acl=127.0.0.1

	echo -e "\nStarting the chroot"
#Mount the container based on installation method		
		if findmnt $CHROOT_DIR >/dev/null
		then
		    sudo umount -l $CHROOT_DIR
		fi
		if [ "$INSMETHOD" == "file" ]
		then
			sudo mount -o loop $INSPATH $CHROOT_DIR
		else
			sudo mount --bind $INSPATH $CHROOT_DIR
			sudo mount -o remount,bind,suid,exec $CHROOT_DIR
		fi
		for i in dev proc sys dev/pts dev/tty
		do
		    sudo busybox mount --bind /$i $CHROOT_DIR/$i
		done

#Mount internal storage in chroot location /media/internal_storage
	echo -e "\nBinding internal storage"
        sudo mkdir -p $CHROOT_DIR/media/internal_storage
		sudo bindfs -o perms=a+rwx --multithreaded $INTERNAL_STORAGE $CHROOT_DIR/media/internal_storage

#Check if available then mount external storage in /media/external_storage
		if [ -n "$(sudo ls -A /mnt/media_rw)" ]
		then
			echo -e "\nBinding external storage"
			sudo mkdir -p $CHROOT_DIR/media/external_storage
			sudo bindfs -o perms=a+rwx --multithreaded $EXTERNAL_STORAGE $CHROOT_DIR/media/external_storage
		else
			echo -e "\nSD card is not present, won't mount external storage"
		fi
	
#check if binfmt_misc support is available in kernel and binfmt-support package is installed
	if [ -d /proc/sys/fs/binfmt_misc ] && [ -f $CHROOT_DIR/usr/sbin/update-binfmts ]
	then
		sudo busybox mount --bind /proc/sys/fs/binfmt_misc $CHROOT_DIR/proc/sys/fs/binfmt_misc
		echo -e "\nLoading binfmts entries"
		su -c busybox chroot $CHROOT_DIR /usr/bin/sudo -u root -i "update-binfmts --enable"
	else 
		echo -e "\nBinfmt support not detected or missing binfmt-support package, skipping loading of binfmt entries"
	fi
	
	
	if check_parameters "-w" "${argslist[*]}"
	then
			xwayland #calls the xwayland function if the -w option is provided
	fi
	
	echo -e "\nAll preparations completed, connecting now\n"
	#check if login binary is available else default to an alternative method to access the chroot
	if ls $CHROOT_DIR/bin | grep -q login
	then
		su -c busybox chroot $CHROOT_DIR /bin/login -f $USERNAME
	else
	    su -c busybox chroot $CHROOT_DIR /bin/sh
	fi


}

#function to stop the chroot
stop(){

#if termux-x11 is running kill it, to remove since it breaks it on next startup
pid=$(sudo pidof com.termux.x11)
if [ "$pid" != "" ];
then
	sudo kill $pid
fi
if findmnt $CHROOT_DIR >/dev/null
then
    sudo umount -l $CHROOT_DIR
else
	echo -e "\nNo container seems to be mounted, exiting"
fi


}

#Function that implements a help message
help(){


optscolumn1=(
"start"
"-w"
"stop"
"restart"
"update"
"list-containers"
"mark-default"
"help"
)

optscolumn2=(
"launch the container specified by argument containername or chroot into the rootfs specified by argument filepath. If no container or filepath is provided it launches the one marked as default"
"start a Xwayland server through Termux:X11, to use only with start or restart"
"stop any running container then exit"
"restart the container specified by argument containername, takes same options as start"
"update this launcher script then exit"
"list available containers then exit"
"mark container specified by argument container name as default"
"print this help message then exit"
)



echo -e "chroot-launcher: chroot-launcher [start|stop|restart|list-containers|mark-default] [-w] containername|filepath"
echo -e "\nA launcher intended mainly for chroot-containers made with the utility chroot-installer, even though it can chroot into every rootfs as long as a full path to it is provided. The chroot is launched with audio, internal, and if available external storage by default"
echo -e "\nOptions:\n"
paste <(printf "%-20s\n" "${optscolumn1[@]}") <(printf "%-20s\n" "${optscolumn2[@]}")
echo -e "\nArguments:\n"
echo -e "\ncontainername     name of the container to be launched"
echo -e "\nfilepath          path to the rootfs that the script should try to launch, used in place of containername"

}

while [ True ];
do
	
	if [ "${argslist[1]}" = "stop" ]
	then
		stop
		break
	elif [ "${argslist[1]}" = "start" ]
    then
    	start 
		break
	elif [ "${argslist[1]}" = "restart" ]
	then
		stop
		start
		break
	elif [ "${argslist[1]}" == "update" ]
	then
		update
		break
	elif [ "${argslist[1]}" == "list-containers" ]
	then
		list-containers
		break
	elif [ "${argslist[1]}" == "mark-default" ]
	then
		mark-default
		break
	elif [ "${argslist[1]}" = "help" ]
	then
		help
		break
    else 
		echo -e "\nNo option specified\n"
		help
        break
	fi	

done


