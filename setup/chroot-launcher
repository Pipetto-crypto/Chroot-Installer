#!/bin/bash

CONFIG_DIR=~/.chroot_installer
LAST_ARGUMENT=$(echo "$@" | awk '{ print $NF }')
CHROOT_DIR=/data/local/mnt
INTERNAL_STORAGE=/sdcard
ANDROIDVERSION=$(getprop ro.build.version.release)
ARG1=$1
ARG2=$2



if [[ "$(su -c busybox)" =~ "not found" ]]
  then
      echo "Busybox not found, install busybox if you want to be able to launch your chroot"
      exit 0
  fi

if [ "$ANDROIDVERSION" == "12" ]
then
	if ! su -c device_config get activity_manager max_phantom_processes | grep -q "2147483647"
	then
		su -c device_config put activity_manager max_phantom_processes 2147483647
	fi
fi		


if [ -n "$(sudo ls -A /mnt/media_rw)" ]
then
	EXTERNAL_STORAGE=/mnt/media_rw/$(sudo ls /mnt/media_rw)
fi


#This function contains the commands required to start the Xwayland socket in the chroot.

xwayland(){

echo "Creating the socket"

sudo mkdir -p $CHROOT_DIR/tmp/runtime-$USERNAME
su -c busybox chroot $CHROOT_DIR /usr/bin/sudo -u root -i "chown $USERNAME:$USERNAME /tmp/runtime-$USERNAME"
taskset -c 4-7 termux-x11 &  
sleep 20
sudo touch $CHROOT_DIR/tmp/runtime-$USERNAME/wayland-0
sudo busybox mount --bind $TMPDIR/wayland-0 $CHROOT_DIR/tmp/runtime-$USERNAME/wayland-0
sudo chmod a+rwx $CHROOT_DIR/tmp/runtime-$USERNAME/wayland-0

}

update(){

git clone https://raw.githubusercontent.com/Pipetto-crypto/Chroot-Installer/master/chroot-launcher?token=GHSAT0AAAAAABZCGT55FGO2FJPUZ3DSSD5OY7REUIA
chmod +x chroot_launcher
mv chroot_launcher $PATH
	
}

list-containers(){

for i in $CONFIG_DIR/*
do
	CONTAINER=$(basename -- $i)
	echo "${CONTAINER%.*}"
done
	
}

mark-default(){

for i in $CONFIG_DIR/* #check each file for default flag and remove it
do
	if [ "$(tail -n 1 $i)" == "default" ]
	then
		sed -i '$ d' $i
	fi
done	

echo "default" >> $CONFIG_DIR/$LAST_ARGUMENT.conf
	
}

start(){


if [ -f $LAST_ARGUMENT  ] || [ -d $LAST_ARGUMENT ] #check if last argument was a file or a directory
then
	INSPATH=$LAST_ARGUMENT
	read -p "What's the username associated with this container: " USERNAME

#check if last argument was start or restart or -w option to know if you didn't provide any container argument
elif [ "$LAST_ARGUMENT" == "-w" ] || [ "$LAST_ARGUMENT" == "start" ] || [ "$LAST_ARGUMENT" == "restart" ]    
then
	if (( $(ls -1 $CONFIG_DIR | wc -l ) == 1 )) #check the number of available containers and if there is only one start it
	then
		CONFIG="$CONFIG_DIR/*"
		USERNAME=$(cat $CONFIG | awk -F '='  '/USERNAME/{print $2}')
		INSPATH=$(cat $CONFIG | awk -F '=' '/INSPATH/{print $2}')
		
	else  #if there are more than one container start the default

		DEFAULTFOUND=false
		for i in $CONFIG_DIR/*
		do
			if [ "$(tail -n 1 $i)" == "default" ]
			then
				DEFAULTFOUND=true
				CONFIG="$i"
				USERNAME=$(cat $CONFIG | awk -F '='  '/USERNAME/{print $2}')
				INSPATH=$(cat $CONFIG | awk -F '=' '/INSPATH/{print $2}')
			fi
		done
	fi		
#try to start the container provided by container argument		
else
	CONTAINEREXIST=false
	containerslist=$(list-containers)
	for i in $containerslist
	do   #check if the container argument provided is in the container list
		if [ "$LAST_ARGUMENT" == "$i" ] 
		then
			CONTAINEREXIST=true
		fi
	done 
	if [ "$CONTAINEREXIST" == "true" ] 
	then
		CONFIG="$CONFIG_DIR/$LAST_ARGUMENT.conf"
		USERNAME=$(cat $CONFIG | awk -F '='  '/USERNAME/{print $2}')
		INSPATH=$(cat $CONFIG | awk -F '=' '/INSPATH/{print $2}')
	fi
fi

#check if a default container is found and in case exit
if [ "$DEFAULTFOUND" == "false" ] 
then
    echo -e "No default container found, mark one as default or start with a container name"
    exit
fi

#check if the container exists and in case exit
if [ "$CONTAINEREXIST" == "false" ]
then 
	echo -e "The container you provided doesn't exist, exiting"
	exit
fi

#check that the container provided is valid and in case exit
if [ "$INSPATH" == "" ] || [ "$USERNAME" == "" ]
then
	echo -e "This container seems to be damaged, exiting for safety"
	exit
fi
	
if [ -f $INSPATH ]
then
    INSMETHOD="file"
elif [ -d $INSPATH ]
then
	INSMETHOD="folder"
else
	echo -e "The container installation path doesn't seem to exist so I can't launch it, exiting"
	exit
fi


	echo -e "\nInitializing the audio server"
		pulseaudio --start --exit-idle-time=-1
		pacmd load-module module-native-protocol-tcp auth-ip-acl=127.0.0.1

	echo -e "\nStarting the chroot"
		
		if findmnt $CHROOT_DIR >/dev/null
		then
		    sudo umount -l $CHROOT_DIR
		fi
		if [ "$INSMETHOD" == "file" ]
		then
			sudo mount -o loop $INSPATH $CHROOT_DIR
		else
			sudo mount --bind $INSPATH $CHROOT_DIR
			sudo mount -o remount,bind,suid,exec $CHROOT_DIR
		fi
		for i in dev proc sys dev/pts dev/tty
		do
		    sudo busybox mount --bind /$i $CHROOT_DIR/$i
		done

	echo -e "\nBinding internal storage"
        #This is not required if you are using proot-distro
        sudo mkdir -p $CHROOT_DIR/media/internal_storage
		sudo bindfs -o perms=a+rwx --multithreaded $INTERNAL_STORAGE $CHROOT_DIR/media/internal_storage

		if [ -n "$(sudo ls -A /mnt/media_rw)" ]
		then
			echo -e "\nBinding external storage"
			sudo mkdir -p $CHROOT_DIR/media/external_storage
			sudo bindfs -o perms=a+rwx --multithreaded $EXTERNAL_STORAGE $CHROOT_DIR/media/external_storage
		else
			echo -e "\nSD card is not present, won't mount external storage"
		fi
	

	if [ -d /proc/sys/fs/binfmt_misc ] && [ -f $CHROOT_DIR/usr/bin/update-binfmts ]
	then
		sudo busybox mount --bind /proc/sys/fs/binfmt_misc $CHROOT_DIR/proc/sys/fs/binfmt_misc
		echo -e "\nLoading binfmts entries"
		su -c busybox chroot $CHROOT_DIR /usr/bin/sudo -u root -i "update-binfmts --enable"
	else 
		echo -e "\nBinfmt support not detected or missing binfmt-support package, skipping loading of binfmt entries"
	fi
	
	
	if [ "$ARG2" = "-w" ]
	then
		xwayland #calls the xwayland function after starting the chroot
		
	fi
	
	echo -e "\nAll preparations completed, connecting now\n"
	su -c busybox chroot $CHROOT_DIR /bin/login -f $USERNAME


}

stop(){

pid=$(sudo pidof com.termux.x11)
if [ "$pid" != "" ];
then
	sudo kill $pid
fi
sudo umount -l $CHROOT_DIR


}

help(){

echo -e "chroot-launcher: chroot-launcher [start|stop|restart|list-containers|mark-default] [-w] containername|filepath"
echo -e "\nA launcher intended mainly for chroot-containers made with the utility chroot-installer, even though it can chroot into every rootfs as long as a full path to it is provided. The chroot is launched with audio, internal, and if available external storage by default"
echo -e "\nOptions:\n"
echo -e "\nstart     Launches the container specified by argument containername or chroot into the rootfs specified by argument filepath. If no container or filepath is provided it launches the one marked as default"
echo -e "stop        Stops the container, takes no argument"
echo -e "restart     Restart the container specified by argument containername, works like start."
echo -e "update      Update this launcher script, takes no argument"
echo -e "list-containers      List available containers, takes no argument"
echo -e "mark-default       Mark container specficied by argument containername as default"
echo -e "help        Print this help page,takes no argument\n"
echo -e "\nArguments:\n"
echo -e "\ncontainername     name of the container to be launched"
echo -e "\nfilepath      Path to the rootfs that the script should try to launch. Used in place of containername"

}

while [ True ];
do
	
	if [ "$ARG1" = "stop" ]
	then
		stop
		break
	elif [ "$ARG1" = "start" ]
        then    
		if [ -d $CHROOT_DIR/home ]
		then
			echo "Chroot already mounted, connecting"
			su -c busybox chroot $CHROOT_DIR /bin/login -f android
		else 
			start
		fi
		break
	elif [ "$ARG1" = "restart" ]
	then
		stop
		start
		break
	elif [ "$ARG1" == "update" ]
	then
		update
		break
	elif [ "$ARG1" == "list-containers" ]
	then
		list-containers
		break
	elif [ "$ARG1" == "mark-default" ]
	then
		mark-default
		break
	elif [ "$ARG1" = "help" ]
	then
		help
		break
    else 
		echo -e "\nNo option specified\n"
		help
        break
	fi	

done


