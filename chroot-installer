#!/bin/bash

echo -e "WARNING: THIS SCRIPT IS UNTESTED ON ANDROID VERSIONS NEWER THAN 10, SO IT MAY NOT WORK. ISSUES ABOUT NOT WORKING ON NEWER ANDROID VERSIONS WILL ONLY BE ACCEPTED WHEN PROPER LOGS ARE PROVIDED"
echo -e "\nWARNING: TERMUX:X11 APP MAY NOT WORK IN A CHROOT DEPENDING ON YOUR ANDROID VERSION. NO ISSUES WILL BE ACCEPTED ABOUT TERMUX:X11 AS THEY AREN'T RELATED TO THIS SCRIPT"
#sleep 10

CHROOT_DIR=/data/local/mnt
CONFIG_DIR=~/.chroot_installer
ANDROIDVERSION=$(getprop ro.build.version.release | cut -f1,2 -d '.')
ROOTFS_DIR=~/installed-rootfs
index=1
for var in "$@"
do
	argslist[$index]=$var
	index=$((index+1))
done
CONFIG_FILE=$CONFIG_DIR/${argslist[2]}.conf
NOTDEBIAN=false


make_image(){

    echo -e "\nCreating the rootfs image, requires at least 8GB of storage\n"
    read -p "Select an image name: " IMGNAME
    read -p "Select an installation path: " SPATH
    read -p "Select image size in megabytes: " SIZE

    INSPATH=$SPATH/$IMGNAME.img
    SIZEKB=$(($SIZE*1000))
    COUNT=$(($SIZEKB/4))

    echo "INSPATH=$INSPATH" > $CONFIG_FILE

    if findmnt $CHROOT_DIR >/dev/null
    then
        sudo umount -l $CHROOT_DIR
    fi

    if [ ! -f $INSPATH ] || (( "$(du --apparent-size -k $INSPATH | cut -f1)" < $SIZE ))
    then
        sudo dd if=/dev/zero of=$INSPATH bs=4k count=$COUNT
    fi
    sudo mkfs.ext4 $INSPATH
    sudo tune2fs -O ^metadata_csum $INSPATH
    sudo tune2fs -i0 -c0 $INSPATH
    sudo mount -o loop $INSPATH $CHROOT_DIR
    sudo tar --skip-old-files -xjf $ROOTFS -C $CHROOT_DIR
    sudo umount -l $CHROOT_DIR
}

make_folder(){

  INSPATH=$ROOTFS_DIR/${argslist[2]}
  mkdir -p $INSPATH
  sudo chmod 755 $INSPATH
  sudo chown 0:0 $INSPATH
  sudo tar --skip-old-files -xjf $ROOTFS -C $INSPATH
  echo "INSPATH=$INSPATH" > $CONFIG_FILE
	
}

mark_default(){

for i in $CONFIG_DIR/* #check each file for default flag and remove it
do
    if [ "$(tail -n 1 $i)" == "default" ]
    then
        sed -i '$ d' $i
    fi
done

echo "default" >> $CONFIG_FILE




	
}

first_setup(){

  read -p "Input an username: " USRNAME
  echo "USERNAME=$USRNAME" >> $CONFIG_FILE
  mark_default
  sudo cp $PREFIX/etc/resolv.conf $CHROOT_DIR/etc
  echo "localhost" | sudo tee -a $CHROOT_DIR/etc/hostname >/dev/null 2>&1
  su -c busybox chroot $CHROOT_DIR "/usr/sbin/useradd --create-home $USRNAME"
  su -c busybox chroot $CHROOT_DIR "/usr/bin/passwd $USRNAME"
  su -c busybox chroot $CHROOT_DIR "/usr/sbin/groupadd -g 3001 aid_net_bt_admin"
  su -c busybox chroot $CHROOT_DIR "/usr/sbin/groupadd -g 3002 aid_net_bt"
  su -c busybox chroot $CHROOT_DIR "/usr/sbin/groupadd -g 3003 aid_inet"
  su -c busybox chroot $CHROOT_DIR "/usr/sbin/groupadd -g 3004 aid_net_raw"
  su -c busybox chroot $CHROOT_DIR "/usr/sbin/groupadd -g 3005 aid_net_admin"
  su -c busybox chroot $CHROOT_DIR "/usr/sbin/usermod -aG sudo $USRNAME"
  su -c busybox chroot $CHROOT_DIR "/usr/sbin/usermod -aG aid_inet,aid_net_raw,aid_net_admin,aid_net_bt,aid_net_bt_admin $USRNAME"
  su -c busybox chroot $CHROOT_DIR "/usr/sbin/usermod -aG aid_inet,aid_net_raw,aid_net_admin,aid_net_bt,aid_net_bt_admin root"
  su -c busybox chroot $CHROOT_DIR "/usr/sbin/usermod -g 3003 _apt"
  echo -e "\nCopying installation scripts and required files to the chroot"

  sudo mkdir -p $CHROOT_DIR/home/$USRNAME/scripts
  sudo cp setup/*.sh $CHROOT_DIR/home/$USRNAME/scripts
  sudo chmod -R a+rwx $CHROOT_DIR/home/$USRNAME/scripts
  ID_LIKEOS="$(sudo cat $CHROOT_DIR/etc/os-release | awk -F "=" '/ID_LIKE/{print $2}')"
  if [ "$ID_LIKEOS" == "debian" ] || [ "$ID_LIKEOS" == "" ]
  then
  		echo -e "\nInstalling required dependencies"

  		su -c busybox chroot $CHROOT_DIR /usr/bin/sudo -u root -i "apt update"
  		su -c busybox chroot $CHROOT_DIR /usr/bin/sudo -u root -i "apt install wget gnupg2 xwayland -y"                     
  else
		NOTDEBIAN=true

  fi

  echo -e "\nAppending important env variables to profile and setting bash as the main shell"                         
  su -c busybox chroot $CHROOT_DIR  /usr/bin/sudo -u $USRNAME -i "bash -c /home/$USRNAME/scripts/setup_env.sh"



}

install_de(){

read -p "Select a DE among the available choices: [xfce,lxqt,icewm,fluxbox]" DE
if [ "$DE" == "xfce" ]
then
	su -c busybox chroot $CHROOT_DIR /usr/bin/sudo -u root -i "apt install tigervnc-standalone-server tigervnc-common dbus-x11 tigervnc-xorg-extension xfce4 xfce4-goodies -y"
elif [ "$DE" == "lxqt" ]
then
	su -c busybox chroot $CHROOT_DIR /usr/bin/sudo -u root -i "apt install tigervnc-standalone-server tigervnc-common dbus-x11 tigervnc-xorg-extension lxqt -y"
elif [ "$DE" == "icewm" ]
then
	su -c busybox chroot $CHROOT_DIR /usr/bin/sudo -u root -i "apt install tigervnc-standalone-server tigervnc-common dbus-x11 tigervnc-xorg-extension icewm -y"
elif [ "$DE" == "fluxbox" ]
then
	su -c busybox chroot $CHROOT_DIR /usr/bin/sudo -u root -i "apt install tigervnc-standalone-server tigervnc-common dbus-x11 tigervnc-xorg-extension fluxbox -y"
fi

	
su -c busybox chroot $CHROOT_DIR /usr/bin/sudo -u $USRNAME -i "bash -c /home/$USRNAME/scripts/install_vnc.sh"	
	
}

install(){

if [ -f $CONFIG_FILE ]
then
    USERNAME=$(cat $CONFIG_FILE | awk -F '='  '/USERNAME/{print $2}')
    INSPATH=$(cat $CONFIG_FILE | awk -F '=' '/INSPATH/{print $2}')
    if [ "$USERNAME" == "" ] || [ "$INSPATH" == "" ]
    then
        echo -e "This container seems to exist but it looks empty, so I will recreate it"
    else
        read -p "This container already exists, do you want me to recreate it [y|n]: " CHOICE
        if [ "$CHOICE" == "n" ]
        then
        	echo -e "\nI will leave then"
        	exit
        fi
    fi
fi

if [ "${argslist[3]}" == "--custom" ]
then
	echo -e "\nUsing user selected rootfs"
	ROOTFS=${argslist[4]}
elif [ "${argslist[3]}" == "debian" ]
then
	echo -e "\nDownloading debian rootfs"
	if [ ! -f /sdcard/debian.tar.bz2 ]
	then
		megadl https://mega.nz/file/cV5ClJrb#h5UvcIdiLq2zFncGYBe3lBL3QjauJFmLupu2faKvFUY --path=/sdcard
	fi
	ROOTFS=/sdcard/debian.tar.bz2
else
	echo -e "No distro or rootfs specified, exiting"
	exit
fi


echo -e "\nInitialization installation of the rootfs\n"

cp setup/chroot-launcher .
sudo mkdir -p $CHROOT_DIR
sudo chown 755 $CHROOT_DIR
mkdir -p $CONFIG_DIR
touch $CONFIG_FILE
read -p "Select an installation method: " INSMETHOD


if [ "$INSMETHOD" == "file" ]
then
	echo "placehol"
	#make_image

else
	
	make_folder
fi

echo -e "\nMounting the container"

if findmnt $CHROOT_DIR >/dev/null
then
	sudo umount -l $CHROOT_DIR
fi

if [ "$INSMETHOD" == "file" ] 
then
	sudo mount -o loop $INSPATH $CHROOT_DIR
else
	sudo mount --bind $INSPATH $CHROOT_DIR
	sudo mount -o remount,bind,suid,exec $CHROOT_DIR
fi 
for i in dev proc sys dev/pts dev/tty
do
	sudo busybox mount --bind /$i $CHROOT_DIR/$i
done

first_setup

for i in ${argslist[@]}
do
  if [ "$i" == "-d" ]  && [ "$NOTDEBIAN" == "false" ]
  then
  		echo -e "\nInstalling a DE\n"
		install_de
	fi
done

 for i in ${argslist[@]}
 do
	if [ "$i" == "-b" ]  &&	[ "$NOTDEBIAN" == "false" ]
  	then
        echo -e "\nInstalling wine,box86,box64\n"
        su -c busybox chroot $CHROOT_DIR /usr/bin/sudo -u $USRNAME -i "bash -c /home/$USRNAME/scripts/install_box.sh"
		  if [ -d /proc/sys/fs/binfmt_misc ]
		  then
          		sudo busybox mount --bind /proc/sys/fs/binfmt_misc $CHROOT_DIR/proc/sys/fs/bin
          		echo -e "\nInstalling binfmt entries"
          		su -c busybox chroot $CHROOT_DIR /usr/bin/sudo -u root -i "apt install binfmt-support -y"
          		sudo cp binfmt-confs/box86 binfmt-confs/box64  $CHROOT_DIR/usr/share/binfmts
          		su -c busybox chroot $CHROOT_DIR /usr/bin/sudo -u root -i "update-binfmts --import"
          fi

	 fi
  done


echo -e "\nFirst setup completed, stopping the chroot"

sudo umount -l $CHROOT_DIR

echo -e "\nCopying the chroot-launcher and chroot-installer scripts to $PATH"

mv chroot-launcher $PATH
cp chroot-installer $PATH
chmod +x $PATH/chroot-launcher $PATH/chroot-installer

}

remove(){

if [ -f $CONFIG_FILE ]
then
	INSPATH=$(cat $CONFIG_FILE | awk -F '=' '/INSPATH/{print $2}')
	echo -e "Unmounting any running container"
	sudo umount -l $CHROOT_DIR
	sudo umount -l $CHROOT_DIR/media/*
	echo -e "Deleting the selected container"
	sudo rm -rf $INSPATH
	sudo rm -rf $CONFIG_FILE
else
	echo -e "This container doesn't exist, provide an existing container"
	exit
fi

	
}

list (){

echo -e "\nAvailable distros:\n"
echo -e "Debian 11 Bullseye"
echo -e "Ubuntu 22.04 JammyFish"

}

update(){

#git clone 
chmod +x chroot-installer
mv chroot-installer $PATH
	
}

help(){

echo -e "chroot-installer: chroot-installer [install|remove|update|list|help] containername distro|[--custom] path [-b,-d]"
echo -e "\nScript thath help to install and remove chroot containers for rooted device with busybox installed.\n"
echo -e "\nOptions:\n"
echo -e "install      install the container with name containername and using distro specified by distro argument"
echo -e "remove       remove the container specified by argument containername alongside all of its files.Takes only argument containername with no other options"
echo -e "list         list available distros"
echo -e "update       update this script,takes no argument"
echo -e "help         print this help message,takes no argument\n"
echo -e "--custom     can be specified alongside install and in place of argument distro for inputting custom rootfses through the argument path, only debian-based rootfses are guaranteed to work"
echo -e "-d           install a desktop environment of your choice alongside VNC, disabled by default and only available for debian-based distros"
echo -e "-b           install box86 and box64 alongside wine to run x86 apps,disabled by default and only available for debian-based distros"
echo -e "\nArguments:"
echo -e "containersname  name of the container you want to install"
echo -e "path            full path of the custom rootfs, to use only with --custom option"
echo -e "distro          specify a distro to install, takes the place of --custom option. To check available distros use the list option"
	
}


if [[ "$(su -c busybox)" =~ "not found" ]]
then
    echo "Busybox not available,please install busybox before using this installer"
    exit 0
fi

if (( $(echo "$ANDROIDVERSION>12" | bc -l) ))
then
    if [ "$(su -c settings get global settings_enable_monitor_phantom_procs)" == "true" ]
    then
        echo -e "Android 12.1 or greater detected, disabling phantom processes killer"
        su -c settings put global settings_enable_monitor_phantom_procs false
    fi
fi

while [ True ]
do
	if [ "${argslist[1]}" == "install" ]
	then
		install
		break
	elif [ "${argslist[1]}" == "remove" ]
	then
		remove
		break
	elif [ "${argslist[1]}" == "update" ]
	then
		update
		break
	elif [ "${argslist[1]}" == "list" ]
	then
		list
		break
	elif [ "${argslist[1]}" == "help" ]
	then
		help
		break
	else
		help
		break
	fi
done
