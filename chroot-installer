#!/bin/bash

#Colours

RED="\e[1;31m"
GREEN="\e[1;32m"
WHITE="\e[0m"

#Variables

CHROOT_DIR=/data/local/mnt
CONFIG_DIR=~/.chroot_installer
SETUP_DIR=$CONFIG_DIR/setup
SCRIPTS_DIR=$SETUP_DIR/scripts
INITIAL_CONFIGS_DIR=$SETUP_DIR/configs
BOX_CONFIGS_DIR=$SETUP_DIR/boxconfigs
CONTAINERS_DIR=$CONFIG_DIR/containers
CACHED_ROOTFS_DIR=$CONFIG_DIR/cachedrootfses
ANDROIDVERSION=$(getprop ro.build.version.release | cut -f1,2 -d '.')
ROOTFS_DIR=~/installed-rootfs
#this for cycle put all arguments into array argslist
index=1
for var in "$@" 
do
	argslist[$index]=$var
	index=$((index+1))
done

#Create a config file with the same name as the container
CONFIG_FILE=$CONTAINERS_DIR/${argslist[2]}.conf
ARCH=$(uname -m)
ISCUSTOM=false

#Distributions

if [ "$ARCH" == "aarch64" ]
then
	UBUNTU_ROOTFS=ubuntu-base-22.04.1-base-arm64.tar.gz
	DEBIAN_ROOTFS=debian.tar.bz2
	MANJARO_ROOTFS=Manjaro-ARM-aarch64-latest.tar.gz
	ARCH_ROOTFS=ArchLinuxARM-aarch64-latest.tar.gz
elif [ "$ARCH" == "armv7l" ] || [ "$ARCH" == "armv8l" ]
then
	if [ "${argslist[3]}" == "manjaro" ]
	then
		echo -e "\nManjaro is not supported on armhf platforms, select another distro"
		exit
	elif [ "${argslist[3]}" == "debian" ]
	then
		echo -e "No custom debian armhf has been provided yet, please make one with debootstrap and use it with --custom option"
		exit
	fi
	UBUNTU_ROOTFS=ubuntu-base-22.04.1-base-arm64.tar.gz
	ARCH_ROOTFS=ArchLinuxARM-armv7-latest.tar.gz
elif [ ! "${argslist[3]}" == "--custom" ]
then
	echo -e "This specific platform is not supported by any of the distros provided by this installer but you can still use a custom rootfs"
	exit
fi

#function that makes the filesystem image where the rootfs get unpacked

make_image(){

#Ask user questions about the image
    echo -e "\nCreating the rootfs image, requires at least 8GB of storage\n"
    read -p "Select an image name: " IMGNAME
    read -p "Select an installation path: " SPATH
    read -p "Select image size in megabytes: " SIZE

#Keep track of the user input installation path
    INSPATH=$SPATH/$IMGNAME.img
#Calculate size in KB from user input size and use that to calculate dd count
    SIZEKB=$(($SIZE*1000))
    COUNT=$(($SIZEKB/4))
#Write installation path to config file
    echo "INSPATH=$INSPATH" > $CONFIG_FILE

#Unmount any mounted container before making the image
    if findmnt $CHROOT_DIR >/dev/null
    then
        su -c umount -l $CHROOT_DIR
    fi

#Make the image only if it doesn't exist or if its size doesn't match the user input one. It disables some features that may not be supported by some older Android kernels as well.
    if [ ! -f $INSPATH ] || (( "$(du --apparent-size -k $INSPATH | cut -f1)" < $SIZE ))
    then
        su -c dd if=/dev/zero of=$INSPATH bs=4k count=$COUNT
    fi
    su -c mke2fs -t ext4 $INSPATH
    su -c tune2fs -O ^metadata_csum $INSPATH
    su -c tune2fs -i0 -c0 $INSPATH
#Mount the image
    su -c busybox mount -o loop $INSPATH $CHROOT_DIR
#Based on the extension, we unpack the rootfs into the mounted image
    FILENAME="$(basename $ROOTFS)"
    case "$FILENAME" in
    *.tar.bz2)
              su -c busybox tar -kxjf $ROOTFS -C $CHROOT_DIR
              ;;
    *.tar.gz)
			su -c busybox tar -kxzf $ROOTFS -C $CHROOT_DIR
            ;;
     *.tar.xz)
     		su -c busybox tar -kxfp $ROOTFS -C $CHROOT_DIR

    esac
    su -c umount -l $CHROOT_DIR
}

#Function to make a rootfs folder in case it has been chosen by user as installation method
make_folder(){

#Create a folder with the same name as the container
  INSPATH=$ROOTFS_DIR/${argslist[2]}
  mkdir -p $INSPATH
#Gives it the right permissions
  su -c chmod 755 $INSPATH
  su -c chown 0:0 $INSPATH
  FILENAME="$(basename $ROOTFS)"
  case "$FILENAME" in
  *.tar.bz2)
  	su -c busybox tar -kxjf $ROOTFS -C $INSPATH
  	;;
  *.tar.gz)
    su -c busybox tar -kxzf $ROOTFS -C $INSPATH
    ;;
    *.tar.xz)
    su -c busybox tar -kxfp $ROOTFS -C $INSPATH
   esac
  echo "INSPATH=$INSPATH" > $CONFIG_FILE
	
}

#Function that makes the last created container the default one
mark_default(){

for i in $CONTAINERS_DIR/* #check each file for default flag and remove it
do
    if [ "$(tail -n 1 $i)" == "default" ]
    then
        sed -i '$ d' $i
    fi
done

echo "default" >> $CONFIG_FILE




	
}

#Function that does some preliminary setups on the chroot
first_setup(){

echo -e "\nPreparing the chroot. This process will involve creating an user account, adding important Android groups, installing some required packages, importing some installation scripts and appending a bunch of variables to env. If it hangs for a few minutes, please wait"

#check the chroot package manager and save it to variable
if ls $CHROOT_DIR/usr/bin | grep -wq "apt$" 
then 
	PACKAGEMANAGER=apt
elif ls $CHROOT_DIR/usr/bin | grep -wq "pacman$"
then
	PACKAGEMANAGER=pacman
fi 

#Check that the user didn't select a custom rootfs and in case write the installed distro in the config file
if [ ! "${argslist[3]}" == "--custom" ]
then
  echo "DISTRO=${argslist[3]}" >> $CONFIG_FILE
fi
#Ask the user to create an username then write it in the config file

  echo -e "\n"
  read -p "Input an username: " USRNAME
#Copy hostname and hosts in the chroot
  su -c rm -rf $CHROOT_DIR/etc/resolv.conf
  su -c cp $INITIAL_CONFIGS_DIR/resolv.conf $CHROOT_DIR/etc
  su -c chmod 644 $CHROOT_DIR/etc/resolv.conf
  su -c cp $INITIAL_CONFIGS_DIR/hosts $CHROOT_DIR/etc

#Copy sudoers in the chroot

su -c cp $INITIAL_CONFIGS_DIR/sudoers $CHROOT_DIR/etc/sudoers
su -c chmod 440 $CHROOT_DIR/etc/sudoers

#Additional setup required for Manjaro
  if [ "$PACKAGEMANAGER" == "pacman" ]
  then
#Copy custom pacman.conf to chroot with disabled signature checking
  if [ "${argslist[3]}" == "manjaro" ]
  then
      su -c cp $INITIAL_CONFIGS_DIR/pacman.conf $CHROOT_DIR/etc
  else
      su -c cp $INITIAL_CONFIGS_DIR/pacman-arch.conf $CHROOT_DIR/etc/pacman.conf
  fi
      su -c busybox chroot $CHROOT_DIR "/usr/bin/pacman-key --init"
  if [ "${argslist[3]}" == "manjaro" ]
  then    
      su -c busybox chroot $CHROOT_DIR "/usr/bin/pacman-key --populate archlinux-arm manjaro-arm manjaro"
      su -c busybox chroot $CHROOT_DIR "/usr/bin/pacman-mirrors -f10"
  else
      su -c busybox chroot $CHROOT_DIR "/usr/bin/pacman-key --populate archlinux-arm"
  fi
    
  if [ "${argslist[3]}" == "manjaro" ] 
  then   
      su -c busybox chroot $CHROOT_DIR "/usr/bin/pacman -Syyu base manjaro-system manjaro-release --noconfirm"
  else
      su -c busybox chroot $CHROOT_DIR "/usr/bin/pacman -Syyu base --noconfirm"
  fi  
      su -c busybox chroot $CHROOT_DIR "/usr/sbin/useradd --create-home $USRNAME"
      su -c busybox chroot $CHROOT_DIR "/usr/sbin/groupadd wheel"
      su -c busybox chroot $CHROOT_DIR "/usr/sbin/usermod -aG wheel $USRNAME"
  fi    
#Set right permissions for hosts	
  su -c chown 0:0 $CHROOT_DIR/etc/hosts
  su -c chmod 644 $CHROOT_DIR/etc/hosts
#Check if custom rootfs  has been used as it needs extra steps before continuing
if [ "${argslist[3]}" == "--custom" ]
then
#Copy modified etc/group to the chroot, avoid checking for too many binaries
	if [ ! -f $CHROOT_DIR/sbin/useradd ] && [ ! -f $CHROOT_DIR/bin/passwd ]
	then
		echo -e "\nCreating an user account is not possible in this rootfs so I can't set it up any further, exiting"
		su -c umount -l $CHROOT_DIR
		echo "USERNAME=" >> $CONFIG_FILE
		mark_default
		exit 
	fi	
fi
#Create a password for the user account, the root account, create Android specific groups
  su -c busybox chroot $CHROOT_DIR "/usr/bin/echo 'localhost' > $CHROOT_DIR/etc/hostname"
  if [ "${argslist[3]}" == "ubuntu" ] || [ "${argslist[3]}" == "debian" ] || [ "${argslist[3]}" == "--custom" ]
  then
  	  su -c busybox chroot $CHROOT_DIR "/usr/sbin/useradd --create-home $USRNAME"
  fi
  echo -e "\nUser account created, please insert a password for it: "
  su -c busybox chroot $CHROOT_DIR "/usr/bin/passwd $USRNAME"
  echo -e "\nPassword registered, please insert one for your root account as well: "
  su -c busybox chroot $CHROOT_DIR "/usr/bin/passwd root"
  su -c busybox chroot $CHROOT_DIR "/usr/sbin/groupadd -g 3001 aid_net_bt_admin"
  su -c busybox chroot $CHROOT_DIR "/usr/sbin/groupadd -g 3002 aid_net_bt"
  su -c busybox chroot $CHROOT_DIR "/usr/sbin/groupadd -g 3003 aid_inet"
  su -c busybox chroot $CHROOT_DIR "/usr/sbin/groupadd -g 3004 aid_net_raw"
  su -c busybox chroot $CHROOT_DIR "/usr/sbin/groupadd -g 3005 aid_net_admin"
  su -c busybox chroot $CHROOT_DIR "/usr/sbin/groupadd sudo"
  su -c busybox chroot $CHROOT_DIR "/usr/sbin/usermod -aG aid_inet,aid_net_raw,aid_net_admin,aid_net_bt,aid_net_bt_admin $USRNAME"
  su -c busybox chroot $CHROOT_DIR "/usr/sbin/usermod -aG aid_inet,aid_net_raw,aid_net_admin,aid_net_bt,aid_net_bt_admin root"
  su -c busybox chroot $CHROOT_DIR "/usr/sbin/usermod -aG sudo $USRNAME"
  echo "USERNAME=$USRNAME" >> $CONFIG_FILE

  #Install some required packages
  if [ "$PACKAGEMANAGER" == "apt" ]
  then
  		su -c busybox chroot $CHROOT_DIR "/usr/sbin/usermod -g 3003 _apt"
		su -c busybox chroot $CHROOT_DIR '/bin/su - root -c "apt update"'
		su -c busybox chroot $CHROOT_DIR '/bin/su - root -c "apt install sudo wget gnupg2 xwayland -y"'     

  elif [ "$PACKAGEMANAGER" == "pacman" ]
  then
		su -c busybox chroot $CHROOT_DIR '/bin/su - root -c "pacman -Syu --noconfirm"'
        su -c busybox chroot $CHROOT_DIR '/bin/su - root -c "pacman -S --noconfirm sudo wget gnupg"'

  fi

  echo -e "\nFirst setup almost completed, setting up the chroot env"
  
  su -c mkdir -p $CHROOT_DIR/home/$USRNAME/scripts
  su -c cp $SCRIPTS_DIR/* $BOX_CONFIGS_DIR/* $CHROOT_DIR/home/$USRNAME/scripts
  su -c chmod -R a+rwx $CHROOT_DIR/home/$USRNAME/scripts

  
  #Append important env variables to /etc/profile and also modify the main shell to bash                      
  su -c busybox chroot $CHROOT_DIR "/bin/su - $USRNAME -c 'bash -c /home/$USRNAME/scripts/setup_env.sh'"
  #Mark the newly created container as default
  mark_default
  


}

install_de(){

read -p "Select a DE among the available choices[xfce|lxqt|icewm|fluxbox]: " DE
#check which DE has been chosen and install dependencies based on distro
if [ "$DE" == "xfce" ]
then
	if [ "$PACKAGEMANAGER" == "apt" ]
	then
		su -c busybox chroot $CHROOT_DIR '/bin/su - root -c "apt install tigervnc-standalone-server tigervnc-common dbus-x11 tigervnc-xorg-extension xfce4 xfce4-goodies -y"'
	elif [ "$PACKAGEMANAGER" == "pacman" ]
	then
		su -c busybox chroot $CHROOT_DIR '/bin/su - root -c "pacman -S --noconfirm tigervnc dbus xfce4 xfce4-goodies"'
	fi
elif [ "$DE" == "lxqt" ]
then
	if [ "$PACKAGEMANAGER" == "apt" ]
	then
		su -c busybox chroot $CHROOT_DIR '/bin/su - root -c "apt install tigervnc-standalone-server tigervnc-common dbus-x11 tigervnc-xorg-extension lxqt -y"'
	elif [ "$PACKAGEMANAGER" == "pacman" ]
	then
		su -c busybox chroot $CHROOT_DIR '/bin/su - root -c "pacman -S --noconfirm tigervnc dbus lxqt"'
	fi
elif [ "$DE" == "icewm" ]
then
	if [ "$PACKAGEMANAGER" == "apt" ]
	then
		su -c busybox chroot $CHROOT_DIR '/bin/su - root -c "apt install tigervnc-standalone-server tigervnc-common dbus-x11 tigervnc-xorg-extension icewm -y"'
	elif [ "$PACKAGEMANAGER" == "pacman" ]
	then
		su -c busybox chroot $CHROOT_DIR '/bin/su - root -c "pacman -S --noconfirm tigervnc dbus icewm xorg-fonts-misc xterm"'
	fi
elif [ "$DE" == "fluxbox" ]
then
	 if [ "$PACKAGEMANAGER" == "apt" ]
	 then
	      su -c busybox chroot $CHROOT_DIR '/bin/su - root -c "apt install tigervnc-standalone-server tigervnc-common dbus-x11 tigervnc-xorg-extension fluxbox xterm -y"'
	  elif [ "$PACKAGEMANAGER" == "pacman" ]
	  then
	      su -c busybox chroot $CHROOT_DIR '/bin/su - root -c "pacman -S --noconfirm tigervnc dbus fluxbox xterm"'
	fi
fi

	
su -c busybox chroot $CHROOT_DIR "/bin/su - $USRNAME -c 'bash -c /home/$USRNAME/scripts/install_vnc.sh'"
	
}

#function that update all setup files
update_setup(){

if [ -d ~/Chroot-Installer ]
then
	git -C ~/Chroot-Installer pull
	rm -rf $SETUP_DIR
	cp -r ~/Chroot-Installer/setup $CONFIG_DIR
else
	git clone https://github.com/Pipetto-crypto/Chroot-Installer.git ~/Chroot-Installer
	rm -rf $SETUP_DIR
	cp -r ~/Chroot-Installer/setup $CONFIG_DIR
	cp ~/Chroot-Installer/chroot-launcher ~/Chroot-Installer/chroot-installer $SETUP_DIR
fi 

	
}

install(){

echo -e "$RED""\nWARNING: THIS SCRIPT IS UNTESTED ON ANDROID VERSIONS NEWER THAN 10, SO IT MAY NOT WORK. ISSUES ABOUT NOT WORKING ON NEWER ANDROID VERSIONS WILL ONLY BE ACCEPTED WHEN PROPER LOGS ARE PROVIDED""$WHITE"
echo -e "$RED""\nWARNING: TERMUX:X11 APP MAY NOT WORK IN A CHROOT DEPENDING ON YOUR ANDROID VERSION. NO ISSUES WILL BE ACCEPTED ABOUT TERMUX:X11 AS THEY AREN'T RELATED TO THIS SCRIPT""$WHITE"
sleep 4
clear


echo    "**********************************************"
echo    "#                                            #"
echo -e "#           $RED CHROOT-INSTALLER v0.1$WHITE           #"
echo    "#                                            #"
echo    "**********************************************"


#create the various config directories if they don't exist
mkdir -p $CONFIG_DIR
mkdir -p $CONTAINERS_DIR
mkdir -p $CACHED_ROOTFS_DIR

#update necessary setup files
update_setup

#check if the container is valid and in case ask if the user wants to recreate it
if [ -f $CONFIG_FILE ]
then
    USERNAME=$(cat $CONFIG_FILE | awk -F '='  '/USERNAME/{print $2}')
    INSPATH=$(cat $CONFIG_FILE | awk -F '=' '/INSPATH/{print $2}')
    if [ "$USERNAME" == "" ] || [ "$INSPATH" == "" ]
    then
        echo -e "This container seems to exist but it looks empty, so I will recreate it"
    else
        read -p "This container already exists, do you want me to recreate it [y|n]: " CHOICE
        if [ "$CHOICE" == "n" ]
        then
        	echo -e "\nI will leave then"
        	exit
        fi
    fi
fi

#based on options and arguments, set the right rootfs variable
if [ "${argslist[3]}" == "--custom" ]
then
	echo -e "\nUsing user selected rootfs"
	ROOTFS=${argslist[4]}
	ISCUSTOM=true
elif [ "${argslist[3]}" == "debian" ]
then
	echo -e "\nDownloading debian rootfs"
	if [ ! -f $CACHED_ROOTFS_DIR/$DEBIAN_ROOTFS ]
	then
		megadl https://mega.nz/file/cV5ClJrb#h5UvcIdiLq2zFncGYBe3lBL3QjauJFmLupu2faKvFUY --path=$CACHED_ROOTFS_DIR
	fi
	ROOTFS=$CACHED_ROOTFS_DIR/$DEBIAN_ROOTFS
elif [ "${argslist[3]}" == "ubuntu" ]
then
	if [ ! -f $CACHED_ROOTFS_DIR/$UBUNTU_ROOTFS ]
	then
		wget http://cdimage.ubuntu.com/ubuntu-base/releases/jammy/release/$UBUNTU_ROOTFS -P $CACHED_ROOTFS_DIR
	fi
	ROOTFS=$CACHED_ROOTFS_DIR/$UBUNTU_ROOTFS
elif [ "${argslist[3]}" == "manjaro" ]
then
	if [ ! -f $CACHED_ROOTFS_DIR/$MANJARO_ROOTFS ]
    then
         wget https://github.com/manjaro-arm/rootfs/releases/download/20230220/$MANJARO_ROOTFS -P $CACHED_ROOTFS_DIR
    fi
    ROOTFS=$CACHED_ROOTFS_DIR/$MANJARO_ROOTFS
elif [ "${argslist[3]}" == "arch" ]
then
	if [ ! -f $CACHED_ROOTFS_DIR/$ARCH_ROOTFS ]
	then
		wget http://os.archlinuxarm.org/os/$ARCH_ROOTFS -P $CACHED_ROOTFS_DIR
	fi
	ROOTFS=$CACHED_ROOTFS_DIR/$ARCH_ROOTFS		 
else
	echo -e "No valid distro or rootfs specified, exiting"
	exit
fi


echo -e "\nInitialization installation of the rootfs\n"


su -c mkdir -p $CHROOT_DIR
su -c chown 755 $CHROOT_DIR
touch $CONFIG_FILE
read -p "Select an installation method: " INSMETHOD


if [ "$INSMETHOD" == "file" ]
then
	make_image

else
	
	make_folder
fi

echo -e "\nMounting the container"

if findmnt $CHROOT_DIR >/dev/null
then
	su -c umount -l $CHROOT_DIR
fi
#verify installation method then mount it based on it
if [ "$INSMETHOD" == "file" ] 
then
	su -c busybox mount -o loop $INSPATH $CHROOT_DIR
else
#for folder method mount bind it in another directory so we can remount it with proper permissions
	su -c busybox mount --bind $INSPATH $CHROOT_DIR
	su -c busybox mount -o remount,bind,suid,exec $CHROOT_DIR
fi 
for i in dev proc sys dev/pts dev/tty
do
	su -c busybox mount --bind /$i $CHROOT_DIR/$i
done

first_setup

#check if -d option is present
for i in ${argslist[@]}
do
  if [ "$i" == "-d" ]
  then
  		echo -e "\nInstalling a DE\n"
		install_de
	fi
done
#check if -b option is present
 for i in ${argslist[@]}
 do
	if [ "$i" == "-b" ] && [ "$ISCUSTOM" == "false" ]
  	then #if manjaro or arch installation, installbonly box64
  		if [ "${argslist[3]}" == "manjaro" ] || [ "${argslist[3]}" == "arch" ]
  		then
        	echo -e "\nInstalling wine,box64\n"        
         	su -c busybox chroot $CHROOT_DIR "/bin/su - $USRNAME -c 'source /home/$USRNAME/scripts/install_box_arch.sh'"
		else
        	echo -e "\nInstalling wine,box86,box64\n"        
        	su -c busybox chroot $CHROOT_DIR "/bin/su - $USRNAME -c 'bash -c /home/$USRNAME/scripts/install_box.sh'"
		fi
		#check if kernel has binfmt_misc support and in case install right dependencies 
		  if [ -d /proc/sys/fs/binfmt_misc ] 
		  then
          		su -c busybox mount --bind /proc/sys/fs/binfmt_misc $CHROOT_DIR/proc/sys/fs/binfmt_misc
          		echo -e "\nInstalling binfmt entries"
          		su -c busybox chroot $CHROOT_DIR "/bin/su - root -c 'apt install binfmt-support -y'"
          		su -c cp $INITIAL_CONFIGS_DIR/box86 $INITIAL_CONFIGS_DIR/box64  $CHROOT_DIR/usr/share/binfmts
          		su -c busybox chroot $CHROOT_DIR "/bin/su - root -c 'update-binfmts --import'"
          fi

	 fi
  done


echo -e "\nFirst setup completed, stopping the chroot"

su -c umount -l $CHROOT_DIR

echo -e "\nCopying the chroot-launcher and chroot-installer scripts to $PATH"

cp $SETUP_DIR/chroot-launcher $PATH
cp $SETUP_DIR/chroot-installer $PATH
chmod +x $PATH/chroot-launcher $PATH/chroot-installer

}

remove(){

index=1
#get and check all arguments after remove
for i in ${argslist[@]}
do
	if (( index>1 ))
	then
		CONFIG_FILE=$CONTAINERS_DIR/$i.conf
		if [ -f $CONFIG_FILE ]
		then
			INSPATH=$(cat $CONFIG_FILE | awk -F '=' '/INSPATH/{print $2}')
			echo -e "Unmounting any running container"
			su -c umount -l $CHROOT_DIR >/dev/null 2>&1
			su -c umount -l $CHROOT_DIR/media/* 2>&1
			echo -e "Deleting the selected container"
			su -c rm -rf $INSPATH
			su -c rm -rf $CONFIG_FILE
		else
			printf "The container %s doesn't exist, please specify a valid container\n" "$i"
		fi
	fi
	index=$((index+1))
done
	
}

list (){

#default status is not installed
debianstatus="$RED""NotInstalled""$WHITE"
manjarostatus="$RED""NotInstalled""$WHITE"
ubuntustatus="$RED""NotInstalled""$WHITE"
archstatus="$RED""NotInstalled""$WHITE"

index=1
#check all configs and save installed distros paramaters in an array
for conf in $CONTAINERS_DIR/*
do
	distro="$(cat $conf | gawk -F "=" '/DISTRO/{print $2}')"
	installedistros[$index]="$distro"
	index=$((index+1))
done

#if a distro is installed change status
for dist in ${installedistros[@]}
do
	case "$dist" in
	debian)
			debianstatus="$GREEN""Installed""$WHITE"
			;;
	ubuntu)
			ubuntustatus="$GREEN""Installed""$WHITE"
			;;
	manjaro)
			manjarostatus="$GREEN""Installed""$WHITE"
			;;
	arch)
			archstatus="$GREEN""Installed""$WHITE"
	esac
done
			
			

printf "\n%-s%23s\n" "Available distros:" "Status:"
echo -e "\nDebian 11 Bullseye                $debianstatus"
echo -e "Ubuntu 22.04 JammyFish            $ubuntustatus"
echo -e "Manjaro ARM64                     $manjarostatus"
echo -e "Arch                              $archstatus"

}

#Waiting for public release to update it
update(){

#git clone 
chmod +x chroot-installer
mv chroot-installer $PATH
	
}


#version function that simply prints version number

version(){

echo -e "chroot-installer v0.1"
	
}

#help function
help(){


column1=(
"install" 
"remove" 
"list" 
"update" 
"help" 
"--custom" 
"-d" 
"-b" 
"--version")
column2=(
"install distro specified by distro argument in container containername" 
"remove the container specified by argument containername alongside all of its files" 
"list available distros and their installation status" 
"update this script then exit" 
"print this help message then exit" 
"can be specified alongside install and in place of argument distro for inputting custom rootfses through the argument path, only debian-based rootfses are guaranteed to work" 
"install a desktop environment of your choice alongside VNC, disabled by default" 
"install box86 and box64 alongside wine to run x86 apps,disabled by default and only available for debian-based distros"
"print this script version then exit"
)
argcolumn1=("containername" "path" "distro")
argcolumn2=("arbitrary container name of user's choice" "full path to the custom rootfs, to use only with --custom option" "name of the distro to install" )

echo -e "chroot-installer: chroot-installer [install|remove|update|list|help|--version] containername distro|[--custom] path [-b,-d]"
echo -e "\nScript thath help to install and remove chroot containers for rooted device with busybox installed.\n"
echo -e "\nOptions:\n"
paste <(printf "%-20s\n" "${column1[@]}") <(printf "%-20s\n" "${column2[@]}")
echo -e "\nArguments:\n"
paste <(printf "%-20s\n" "${argcolumn1[@]}") <(printf "%20s\n" "${argcolumn2[@]}")

}

if [[ "$(su -c busybox)" =~ "not found" ]]
then
    echo "Busybox not available,please install busybox before using this installer"
    exit 0
fi

if (( $(echo "$ANDROIDVERSION>12" | bc -l) ))
then
    if [ "$(su -c settings get global settings_enable_monitor_phantom_procs)" == "true" ]
    then
        echo -e "Android 12.1 or greater detected, disabling phantom processes killer"
        su -c settings put global settings_enable_monitor_phantom_procs false
    fi
fi

if [ "$(findmnt -o FS-OPTIONS /data | awk -F "," '{print $1}' | tail -n 1)" == "ro" ]
then
	echo -e "\nData partition is mounted as read-only, trying to mount it as rw but depending on the phone's manufacturer this operation may fail"
	su -c busybox mount -o rw,remount /data
	if [ "$(findmnt -o FS-OPTIONS /data | awk -F "," '{print $1}' | tail -n 1)" == "ro" ]
	then
		echo -e "\nOperation failed, exiting"
		exit
	else
		echo -e "\nOperation succeeded, continuing"
	fi
fi

	
while [ True ]
do
	if [ "${argslist[1]}" == "install" ]
	then
		install
		break
	elif [ "${argslist[1]}" == "remove" ]
	then
		remove
		break
	elif [ "${argslist[1]}" == "update" ]
	then
		update
		break
	elif [ "${argslist[1]}" == "list" ]
	then
		list
		break
	elif [ "${argslist[1]}" == "help" ]
	then
		help
		break
	elif [ "${argslist[1]}" == "--version" ]
	then
		version
		break
	else
		help
		break
	fi
done

