#!/bin/bash
#Colours

RED="\e[1;31m"
GREEN="\e[1;32m"
WHITE="\e[0m"

#Variables

CHROOT_DIR=/data/local/mnt
CONFIG_DIR=~/.chroot_installer
LAST_ARGUMENT=$(echo "$@" | awk '{ print $NF }')
SETUP_DIR=$CONFIG_DIR/setup
INTERNAL_STORAGE=/sdcard
SCRIPTS_DIR=$SETUP_DIR/scripts
INITIAL_CONFIGS_DIR=$SETUP_DIR/configs
BOX_CONFIGS_DIR=$SETUP_DIR/boxconfigs
EXTRA_CONFIGS_DIR=$SETUP_DIR/extraconfigs
CONTAINERS_DIR=$CONFIG_DIR/containers
CACHED_ROOTFS_DIR=$CONFIG_DIR/cachedrootfses
ANDROIDVERSION=$(getprop ro.build.version.release | cut -f1,2 -d '.')
ROOTFS_DIR=~/installed-rootfs
TERMUX_GID=$(id -g)
TERMUX_UID=$(id -u)
#this for cycle put all arguments into array argslist
index=1
for var in "$@" 
do
	argslist[$index]=$var
	index=$((index+1))
done
ISRUNNING=false

#Create a config file with the same name as the container
CONFIG_FILE=$CONTAINERS_DIR/${argslist[2]}.conf
ARCH=$(uname -m)

#Distributions

if [ "$ARCH" == "aarch64" ]
then
	UBUNTU_ROOTFS=ubuntu-base-22.04.1-base-arm64.tar.gz
	DEBIAN_ROOTFS=debian.tar.bz2
	MANJARO_ROOTFS=Manjaro-ARM-aarch64-latest.tar.gz
	ARCH_ROOTFS=ArchLinuxARM-aarch64-latest.tar.gz
elif [ "$ARCH" == "armv7l" ] || [ "$ARCH" == "armv8l" ]
then
	if [ "${argslist[3]}" == "manjaro" ]
	then
		echo -e "\nManjaro is not supported on armhf platforms, select another distro"
		exit
	elif [ "${argslist[3]}" == "debian" ]
	then
		echo -e "No custom debian armhf has been provided yet, please make one with debootstrap and use it with --custom option"
		exit
	fi
	UBUNTU_ROOTFS=ubuntu-base-22.04.1-base-arm64.tar.gz
	ARCH_ROOTFS=ArchLinuxARM-armv7-latest.tar.gz
elif [ ! "${argslist[3]}" == "--custom" ]
then
	echo -e "This specific platform is not supported by any of the distros provided by this installer but you can still use a custom rootfs"
	exit
fi


#check if external storage is present
if [ -n "$(su -c ls -A /mnt/media_rw)" ]
then
	EXTERNAL_STORAGE=/mnt/media_rw/$(sudo ls /mnt/media_rw)
fi

#Function to allow editing config files
edit-config(){

if [ ! -f $CONTAINERS_DIR/$LAST_ARGUMENT.conf ]
then
	echo "No valid container has been provided, leaving now"
	exit
fi

if [ "${argslist[2]}" == "--mark-default" ]
then
	mark_default
elif [ "${argslist[2]}" == "--set-username" ]
then
	sed -i "3s/=.*/=${argslist[3]}/g" $CONTAINERS_DIR/$LAST_ARGUMENT.conf
elif [ "${argslist[2]}" == "--set-path" ]
then
	sed -i "1s|=.*|=${argslist[3]}|g" $CONTAINERS_DIR/$LAST_ARGUMENT.conf
fi
	
}


xserver(){

echo -e "\nStarting X server through Xvfb"

TERMUX_X11=$PATH/termux-x11
TERMUX_X11_ARGS="--no-xwayland-start"
XVFB=/usr/bin/Xvfb
XVFB_ARGS=":0 -ac -screen 0 4096x4096x24 -noreset"
TERMUX_X11_PID=$PREFIX/var/run/termux-x11.pid
XVFB_PID=/var/run/Xvfb.pid
start-stop-daemon --quiet --background --user $(id -u) --make-pidfile --pidfile $TERMUX_X11_PID --start --exec $TERMUX_X11 -- $TERMUX_X11_ARGS
sleep 4
su -c busybox chroot $CHROOT_DIR "/usr/sbin/start-stop-daemon --quiet --background --make-pidfile --pidfile $XVFB_PID --start --exec $XVFB -- $XVFB_ARGS"


}

xwayland(){

echo -e "\nStarting X server through Xwayland"

TERMUX_X11=$PATH/termux-x11
TERMUX_X11_ARGS="-ac --no-xwayland-start"
XWAYLAND=/usr/bin/Xwayland
XWAYLAND_ARGS=":0 -ac -noreset"
TERMUX_X11_PID=$PREFIX/var/run/termux-x11.pid
XWAYLAND_PID=/var/run/Xwayland.pid
DISPLAY=:0 start-stop-daemon --quiet --background --user $(id -u) --make-pidfile --pidfile $TERMUX_X11_PID --start --exec $TERMUX_X11 -- $TERMUX_X11_ARGS
sleep 4
touch $TMPDIR/runtime-$USRNAME/wayland-0
su -c busybox mount --bind $TMPDIR/termux-x11 $CHROOT_DIR/tmp/runtime-$USRNAME/wayland-0
su -c busybox chroot $CHROOT_DIR "/usr/bin/env XDG_RUNTIME_DIR=/tmp/runtime-$USRNAME /usr/sbin/start-stop-daemon --background --make-pidfile --pidfile $XWAYLAND_PID --start --exec $XWAYLAND -- $XWAYLAND_ARGS"


}


virgl_server(){

echo -e "\nCreating the virgl socket"
VIRGL_ANDROID=$PATH/virgl_test_server_android
VIRGL_ANDROID_ARGS="--use-egl-surfaceless"
VIRGL_ANDROID_PID=$PREFIX/var/run/virgl_test_server_android.pid
MESA_NOERROR=1 start-stop-daemon --quiet --background --make-pidfile --pidfile $VIRGL_ANDROID_PID --start --exec $VIRGL_ANDROID -- $VIRGL_ANDROID_ARGS
sleep 3
	
}


#function that list installed containers
list-containers(){

for i in $CONTAINERS_DIR/*
do
	CONTAINER=$(basename -- $i)
	echo "${CONTAINER%.*}"
done
	
}

#from a config file, return the container name belonging to it
get_container(){
	
strippedconfig=$(basename -- $1)
echo "${strippedconfig%.*}"
	
}

check_parameters(){

exitcode=1

for i in $1
do
	position=1
	for e in $2
	do
		if [ "$i" == "$e" ]
		then
			exitcode=0
			break 2
		fi
	position=$((position+1))
	done
done

return $exitcode

}



#function that start the chroot
start(){


#check if Android Version is 12 and set max phantom processes
if [ "$ANDROIDVERSION" == "12" ]
then
	if ! su -c device_config get activity_manager max_phantom_processes | grep -q "2147483647"
	then
		su -c device_config put activity_manager max_phantom_processes 2147483647
	fi
fi		



containerslist=$(list-containers)

#check if a container is already running and so start it
if [ -f "$CONFIG_DIR/running.txt" ]
then
    runningcontainer=$(cat $CONFIG_DIR/running.txt)
    if [ -f $runningcontainer ] || [ -d $runningcontainer ]
    then
        ISRUNNING=true
    else
        CONFIG=$CONTAINERS_DIR/$runningcontainer.conf
        USRNAME=$(cat $CONFIG | awk -F '='  '/USERNAME/{print $2}')
        INSPATH=$(cat $CONFIG | awk -F '=' '/INSPATH/{print $2}')
        ISRUNNING=true
    fi

elif [ -f $LAST_ARGUMENT  ] || [ -d $LAST_ARGUMENT ] #check if last argument was a file or a directory
then
	INSPATH=$LAST_ARGUMENT
	USRNAME=""
	CONFIG=""

#check if last argument was start or restart or -w option to know if you didn't provide any container argument
elif ! check_parameters "$containerslist" "${argslist[*]}"
then

	if (( $(ls -1 $CONTAINERS_DIR | wc -l ) == 1 )) #check the number of available containers and if there is only one start it
	then
		CONFIG="$CONTAINERS_DIR/*"
		USRNAME=$(cat $CONFIG | awk -F '='  '/USERNAME/{print $2}')
		INSPATH=$(cat $CONFIG | awk -F '=' '/INSPATH/{print $2}')
		
	else  #if there are more than one container start the default

		DEFAULTFOUND=false
		for i in $CONTAINERS_DIR/*
		do
			if [ "$(tail -n 1 $i)" == "default" ]
			then
				DEFAULTFOUND=true
				CONFIG="$i"
				USRNAME=$(cat $CONFIG | awk -F '='  '/USERNAME/{print $2}')
				INSPATH=$(cat $CONFIG | awk -F '=' '/INSPATH/{print $2}')
			fi
		done
		if [ "$DEFAULTFOUND" == "false" ]
		then
			echo -e "No default container found, mark one as default or start with a container"
			exit
		fi
	fi		
#try to start the container provided by container argument		
else
	CONFIG="$CONTAINERS_DIR/$LAST_ARGUMENT.conf"
	USRNAME=$(cat $CONFIG | awk -F '='  '/USERNAME/{print $2}')
	INSPATH=$(cat $CONFIG | awk -F '=' '/INSPATH/{print $2}')
fi

if [ "$USRNAME" == "" ]
then
      USRNAME=root
fi


#check if user has prompted for a custom username
if check_parameters "-u" "${argslist[*]}"
then
	USRNAME=${argslist[$((position+1))]}
fi

if [ "$ISRUNNING" == "false" ]
then      
 	#check that the container provided is valid and in case exit
 	if [ "$INSPATH" == "" ]
 	then
 	    echo -e "This container seems to be damaged, exiting for safety"
 	    exit
 	fi

	if [ -f $INSPATH ]
	then
	    INSMETHOD="file"
	elif [ -d $INSPATH ]
	then
	    INSMETHOD="folder"
	else
	    echo -e "The container installation path doesn't seem to exist so I can't start it.Exiting"
	    exit
	fi

	#Start audio in the chroot
	echo -e "\nInitializing the audio server"

    pulseaudio --start --exit-idle-time=-1
    pacmd load-module module-native-protocol-tcp auth-ip-acl=127.0.0.1
		
    #Mount the container based on installation method	
    echo -e "\nStarting the chroot"

	if findmnt $CHROOT_DIR >/dev/null
	then
		su -c umount -d -l $CHROOT_DIR
    fi
	if [ "$INSMETHOD" == "file" ]
	then
		su -c busybox mount -o loop $INSPATH $CHROOT_DIR
	else
		su -c busybox mount --bind $INSPATH $CHROOT_DIR
		su -c busybox mount -o remount,bind,suid,exec $CHROOT_DIR
	fi
	for i in dev proc sys dev/pts dev/tty
	do
	   su -c busybox mount --bind /$i $CHROOT_DIR/$i
	done

    #Mount internal storage in chroot location /media/internal_storage
	echo -e "\nBinding internal storage"

    su -c mkdir -p $CHROOT_DIR/media/internal_storage
    su -c /data/data/com.termux/files/usr/bin/bindfs -o perms=a+rwx --multithreaded $INTERNAL_STORAGE $CHROOT_DIR/media/internal_storage

    #Check if available then mount external storage in /media/external_storage

	if [ -n "$(sudo ls -A /mnt/media_rw)" ]
    then
		echo -e "\nBinding external storage"
		su -c mkdir -p $CHROOT_DIR/media/external_storage
		su -c /data/data/com.termux/files/usr/bin/bindfs -o perms=a+rwx --multithreaded $EXTERNAL_STORAGE $CHROOT_DIR/media/external_storage
	else
		echo -e "\nSD card is not present, won't mount external storage"
	fi
	
    #check if binfmt_misc support is available in kernel and binfmt-support package is installed

	if [ -d /proc/sys/fs/binfmt_misc ] && [ -f $CHROOT_DIR/usr/sbin/update-binfmts ]
	then
		su -c busybox mount --bind /proc/sys/fs/binfmt_misc $CHROOT_DIR/proc/sys/fs/binfmt_misc
		echo -e "\nLoading binfmts entries"
		su -c busybox chroot $CHROOT_DIR "/bin/su - root -c '/usr/sbin/update-binfmts --enable'"
	else 
		echo -e "\nBinfmt support not detected or missing binfmt-support package, skipping loading of binfmt entries"
	fi

	echo -e "\nMounting termux tmp dir and creating xdg runtime dir"

	su -c busybox mount --bind $TMPDIR $CHROOT_DIR/tmp                                                        
	su -c mkdir -p $CHROOT_DIR/tmp/runtime-$USRNAME
	su -c busybox chroot $CHROOT_DIR "/bin/su - root -c 'chown $USRNAME:$USRNAME /tmp/runtime-$USRNAME'"
    su -c chown root:root $CHROOT_DIR/tmp
    su -c chmod 1777 $CHROOT_DIR/tmp

    if [ ! -d /dev/shm ]
    then 
         echo -e "\nCreating shared memory device node"
         su -c mkdir -p /dev/shm
         su -c chmod 1777 /dev/shm
         su -c mount -t tmpfs tmpfs /dev/shm
	fi

	
	if check_parameters "-x" "${argslist[*]}"
	then
			xserver #calls the xserver function if the -x option is provided
	fi

	if check_parameters "-w" "${argslist[*]}"
	then
			xwayland
	fi
	
	if check_parameters "-v" "${argslist[*]}"
	then
	        virgl_server #calls the xserver function if the -x option
	fi
	
	echo -e "\nAll preparations completed, connecting now\n"

	#check if login binary is available else default to an alternative method to access the chroot
	if su -c ls $CHROOT_DIR/bin | grep -q login
	then
		#check if config exists, if it doesn't it means a custom rootfs has been used
		if [ "$CONFIG" == "" ]
		then
			runningcontainer=$INSPATH
			echo "$runningcontainer" > $CONFIG_DIR/running.txt
			su -c busybox chroot $CHROOT_DIR /bin/login -f $USRNAME
		else
			runningcontainer=$(get_container $CONFIG)
			echo "$runningcontainer" > $CONFIG_DIR/running.txt
			su -c busybox chroot $CHROOT_DIR /bin/login -f $USRNAME
		fi
	else
	    su -c busybox chroot $CHROOT_DIR /bin/sh
	fi

#if container is running start the running container
else
	echo -e "Chroot already mounted, logging in"
	if su -c ls $CHROOT_DIR/bin | grep -q login
	then
		su -c busybox chroot $CHROOT_DIR /bin/login -f $USRNAME
	elif su -c ls $CHROOT_DIR/bin | grep -q sh
	then
		su -c busybox chroot $CHROOT_DIR /bin/sh
	else 
		echo -e "It seems like the container running last time hasn't been stopped properly. Cleaning all stale files"
		rm -rf $CONFIG_DIR/running.txt
	fi
fi


}


#function to stop the chroot
stop(){

rm -rf $CONFIG_DIR/running.txt
if findmnt $CHROOT_DIR >/dev/null
then
    XVFB_PID=$CHROOT_DIR/run/Xvfb.pid
    XWAYLAND_PID=$CHROOT_DIR/run/Xwayland.pid
    TERMUX_X11_PID=$PREFIX/var/run/termux-x11.pid
    VIRGL_ANDROID_PID=$PREFIX/var/run/virgl_test_server_android.pid
	#kill running processes spawned by this script if they exist
	if [ -f $TERMUX_X11_PID ];then start-stop-daemon --stop --pidfile $TERMUX_X11_PID;fi
	if [ -f $XVFB_PID ];then su -c $PATH/start-stop-daemon --stop --pidfile $XVFB_PID;fi
	if [ -f $XWAYLAND_PID ];then su -c $PATH/start-stop-daemon --stop --pidfile $XWAYLAND_PID;fi
	if [ -f $VIRGL_ANDROID_PID ];then $PATH/start-stop-daemon --stop --pidfile $VIRGL_ANDROID_PID;fi
    #deleting pidfiles
    rm -rf $TERMUX_X11_PID
    su -c rm -rf $XVFB_PID
    su -c rm -rf $XWAYLAND_PID
    rm -rf $VIRGL_ANDROID_PID
    #set back right permissions for termux tmp dir
    su -c chown $(id -u):$(id -u) $TMPDIR
    su -c chmod 700 $TMPDIR
	su -c umount -d -l $CHROOT_DIR
else
	echo -e "\nNo container seems to be mounted, exiting"
fi


}




#function that makes the filesystem image where the rootfs get unpacked

make_image(){

#Ask user questions about the image
echo -e "\nCreating the rootfs image, requires at least 8GB of storage\n"
read -p "Select an image name: " IMGNAME
read -p "Select an installation path: " SPATH
read -p "Select image size in megabytes: " SIZE

#Keep track of the user input installation path
INSPATH=$SPATH/$IMGNAME.img
#Calculate size in KB from user input size and use that to calculate dd count
SIZEKB=$(($SIZE*1000))
COUNT=$(($SIZEKB/4))
#Write installation path to config file
echo "INSPATH=$INSPATH" > $CONFIG_FILE

#Unmount any mounted container before making the image
if findmnt $CHROOT_DIR >/dev/null
then
    su -c umount -d -l $CHROOT_DIR
fi

#Make the image only if it doesn't exist or if its size doesn't match the user input one. It disables some features that may not be supported by some older Android kernels as well.
if [ ! -f $INSPATH ] || (( "$(du --apparent-size -k $INSPATH | cut -f1)" < $SIZE ))
then
    su -c dd if=/dev/zero of=$INSPATH bs=4k count=$COUNT
fi

su -c mke2fs -t ext4 $INSPATH
su -c tune2fs -O ^metadata_csum $INSPATH
su -c tune2fs -i0 -c0 $INSPATH
#Mount the image
su -c busybox mount -o loop $INSPATH $CHROOT_DIR
#Based on the extension, we unpack the rootfs into the mounted image
FILENAME="$(basename $ROOTFS)"
case "$FILENAME" in
*.tar.bz2)
          su -c busybox tar -kxjf $ROOTFS -C $CHROOT_DIR
          ;;
*.tar.gz)
	      su -c busybox tar -kxzf $ROOTFS -C $CHROOT_DIR
          ;;
*.tar.xz)
          su -c busybox tar -kxfp $ROOTFS -C $CHROOT_DIR

esac
#Unmount the container after installation of the rootfs is completed
su -c umount -d -l $CHROOT_DIR
}

#Function to make a rootfs folder in case it has been chosen by user as installation method
make_folder(){

#Create a folder with the same name as the container
INSPATH=$ROOTFS_DIR/${argslist[2]}
mkdir -p $INSPATH
#Gives it the right permissions
su -c chmod 755 $INSPATH
su -c chown 0:0 $INSPATH
FILENAME="$(basename $ROOTFS)"
case "$FILENAME" in
*.tar.bz2)
  	      su -c busybox tar -kxjf $ROOTFS -C $INSPATH
  	      ;;
*.tar.gz)
          su -c busybox tar -kxzf $ROOTFS -C $INSPATH
          ;;
*.tar.xz)
          su -c busybox tar -kxfp $ROOTFS -C $INSPATH
esac
#write installation path to config file
echo "INSPATH=$INSPATH" > $CONFIG_FILE
	
}

#Function that makes the last created container the default one
mark_default(){

for i in $CONTAINERS_DIR/* #check each file for default flag and remove it
do
    if [ "$(tail -n 1 $i)" == "default" ]
    then
        sed -i '$ d' $i
    fi
done

echo "default" >> $CONFIG_FILE


}

#Function that does some preliminary setups on the chroot
first_setup(){

echo -e "\nPreparing the chroot. This process will involve creating an user account, adding important Android groups, installing some required packages, importing some installation scripts and appending a bunch of variables to env. If it hangs for a few minutes, please wait"

#check the chroot package manager and save it to variable
if ls $CHROOT_DIR/usr/bin | grep -wq "apt$" 
then 
	PACKAGEMANAGER=apt
elif ls $CHROOT_DIR/usr/bin | grep -wq "pacman$"
then
	PACKAGEMANAGER=pacman
fi 

#Check that the user didn't select a custom rootfs and in case write the installed distro in the config file
if [ ! "${argslist[3]}" == "--custom" ]
then
    echo "DISTRO=${argslist[3]}" >> $CONFIG_FILE
else
    echo "DISTRO=other" >> $CONFIG_FILE
fi
#Ask the user to create an username then write it in the config file

echo -e "\n"
read -p "Input an username: " USRNAME
#Copy hostname and hosts in the chroot
su -c rm -rf $CHROOT_DIR/etc/resolv.conf
su -c cp $INITIAL_CONFIGS_DIR/resolv.conf $CHROOT_DIR/etc
su -c chmod 644 $CHROOT_DIR/etc/resolv.conf
su -c cp $INITIAL_CONFIGS_DIR/hosts $CHROOT_DIR/etc
#Create a password for the user account, the root account, create Android specific groups                      
su -c busybox chroot $CHROOT_DIR "/usr/bin/echo 'localhost' > $CHROOT_DIR/etc/hostname"
#Set right permissions for hosts
su -c chown 0:0 $CHROOT_DIR/etc/hosts
su -c chmod 644 $CHROOT_DIR/etc/hosts



if [ "${argslist[3]}" == "manjaro" ]
then 
     su -c busybox chroot $CHROOT_DIR "/usr/bin/pacman-key --init"
     su -c cp $INITIAL_CONFIGS_DIR/pacman.conf $CHROOT_DIR/etc   
     su -c busybox chroot $CHROOT_DIR "/usr/bin/pacman-key --populate archlinux-arm manjaro-arm manjaro"
     su -c busybox chroot $CHROOT_DIR "/usr/bin/pacman-mirrors -f10"
     su -c busybox chroot $CHROOT_DIR "/usr/bin/pacman -Syyu base manjaro-system manjaro-release --noconfirm"
  
elif [  "${argslist[3]}" == "arch" ]
then
    su -c busybox chroot $CHROOT_DIR "/usr/bin/pacman-key --init"
    su -c cp $INITIAL_CONFIGS_DIR/pacman-arch.conf $CHROOT_DIR/etc/pacman.conf
    su -c busybox chroot $CHROOT_DIR "/usr/bin/pacman-key --populate archlinux-arm"
    su -c busybox chroot $CHROOT_DIR "/usr/bin/pacman -Syyu base --noconfirm"
fi


if find $CHROOT_DIR/usr/sbin -name groupadd 1>/dev/null 2>&1
then

  	 su -c busybox chroot $CHROOT_DIR "/usr/sbin/groupadd -g 3001 aid_net_bt_admin"
  	 su -c busybox chroot $CHROOT_DIR "/usr/sbin/groupadd -g 3002 aid_net_bt"
  	 su -c busybox chroot $CHROOT_DIR "/usr/sbin/groupadd -g 3003 aid_inet"
  	 su -c busybox chroot $CHROOT_DIR "/usr/sbin/groupadd -g 3004 aid_net_raw"
  	 su -c busybox chroot $CHROOT_DIR "/usr/sbin/groupadd -g 3005 aid_net_admin"
  	 su -c busybox chroot $CHROOT_DIR "/usr/sbin/groupadd -g $TERMUX_GID $USRNAME"
  	 SUCCESS1="true"
fi

if find $CHROOT_DIR/usr/sbin -name usermod 1>/dev/null 2>&1
then
  	 su -c busybox chroot $CHROOT_DIR "/usr/sbin/usermod -aG aid_inet,aid_net_raw,aid_net_admin,aid_net_bt,aid_net_bt_admin root"
  	 SUCCESS2="true"
fi
 
if find $CHROOT_DIR/usr/bin -name useradd 1>/dev/null 2>&1 && find $CHROOT_DIR/usr/bin -name passwd 1>/dev/null 2>&1
then
     su -c busybox chroot $CHROOT_DIR "/usr/sbin/useradd -s /bin/bash -u $TERMUX_UID -g $TERMUX_GID --create-home $USRNAME"
     echo -e "\nUser account created, please insert a password for it: "
     su -c busybox chroot $CHROOT_DIR "/usr/bin/passwd $USRNAME"
     echo -e "\nPassword registered, please insert one for your root account as well: "
     su -c busybox chroot $CHROOT_DIR "/usr/bin/passwd root"
     if [ "$SUCCESS1" == "true" ] && [ "$SUCCESS2" == "true" ]
	 then
		  su -c busybox chroot $CHROOT_DIR "/usr/sbin/usermod -aG aid_inet,aid_net_raw,aid_net_admin,aid_net_bt,aid_net_bt_admin $USRNAME"
		  if [ "${argslist[3]}" == "manjaro" ]
		  then
			   su -c busybox chroot $CHROOT_DIR "/usr/sbin/usermod -aG wheel $USRNAME"
		  else
			   su -c busybox chroot $CHROOT_DIR "/usr/sbin/usermod -aG sudo $USRNAME"
		  fi
      fi
else
  	  USRNAME="root"
fi     	  

echo "USERNAME=$USRNAME" >> $CONFIG_FILE

  
if [ "$PACKAGEMANAGER" == "pacman" ]
then
     su -c busybox chroot $CHROOT_DIR '/bin/su - root -c "pacman -Syu --noconfirm && pacman -S --noconfirm sudo wget gnupg git"'
  
elif [ "$PACKAGEMANAGER" == "apt" ]
then
     su -c busybox chroot $CHROOT_DIR "/usr/sbin/usermod -g 3003 _apt"
     su -c busybox chroot $CHROOT_DIR '/bin/su - root -c "apt update && apt install sudo wget gnupg2 git -y"'

fi

echo -e "\nFirst setup almost completed, copying required installation scripts"

su -c mkdir -p $CHROOT_DIR/home/$USRNAME/scripts
su -c cp $SCRIPTS_DIR/* $BOX_CONFIGS_DIR/* $CHROOT_DIR/home/$USRNAME/scripts
su -c chmod -R a+rwx $CHROOT_DIR/home/$USRNAME/scripts

echo -e "\nCopying additional extra scripts"

wget https://raw.githubusercontent.com/Pipetto-crypto/3in1ProotX86Emus/master/scripts/update -P ~
su -c mv ~/update $CHROOT_DIR/usr/bin
su -c chmod +x $CHROOT_DIR/usr/bin/update
su -c busybox chroot $CHROOT_DIR "/usr/bin/sudo -u root /usr/bin/update"


if [ "${argslist[3]}" == "--custom" ]
then
     echo -e "\nInstallation completed, exiting"
     su -c umount -d -l $CHROOT_DIR
     cp $SETUP_DIR/chroot-installer $PATH
     chmod +x $PATH/chroot-installer
     exit
fi

su -c busybox chroot $CHROOT_DIR "/bin/sudo -u $USRNAME /home/$USRNAME/scripts/setup_env.sh"


#Mark the newly created container as default
mark_default
  


}

install_de(){

read -p "Select a DE among the available choices[xfce|lxqt|icewm|fluxbox]: " DE
#check which DE has been chosen and install dependencies based on distro
if [ "$DE" == "xfce" ]
then
	if [ "$PACKAGEMANAGER" == "apt" ]
	then
		su -c busybox chroot $CHROOT_DIR '/bin/su - root -c "apt install tigervnc-standalone-server tigervnc-common dbus-x11 tigervnc-xorg-extension xfce4 xfce4-goodies xvfb xwayland-y"'
	elif [ "$PACKAGEMANAGER" == "pacman" ]
	then
		su -c busybox chroot $CHROOT_DIR '/bin/su - root -c "pacman -S --noconfirm tigervnc dbus xfce4 xfce4-goodies xorg-server-xvfb xwayland"'
	fi
elif [ "$DE" == "lxqt" ]
then
	if [ "$PACKAGEMANAGER" == "apt" ]
	then
		su -c busybox chroot $CHROOT_DIR '/bin/su - root -c "apt install tigervnc-standalone-server tigervnc-common dbus-x11 xvfb xwayland tigervnc-xorg-extension lxqt -y"'
	elif [ "$PACKAGEMANAGER" == "pacman" ]
	then
		su -c busybox chroot $CHROOT_DIR '/bin/su - root -c "pacman -S --noconfirm xorg-server-xvfb xwayland tigervnc dbus lxqt"'
	fi
elif [ "$DE" == "icewm" ]
then
	if [ "$PACKAGEMANAGER" == "apt" ]
	then
		su -c busybox chroot $CHROOT_DIR '/bin/su - root -c "apt install tigervnc-standalone-server xvfb xwayland tigervnc-common dbus-x11 tigervnc-xorg-extension icewm -y"'
	elif [ "$PACKAGEMANAGER" == "pacman" ]
	then
		su -c busybox chroot $CHROOT_DIR '/bin/su - root -c "pacman -S --noconfirm xorg-server-xvfb xwayland tigervnc dbus icewm xorg-fonts-misc xterm"'
	fi
elif [ "$DE" == "fluxbox" ]
then
	 if [ "$PACKAGEMANAGER" == "apt" ]
	 then
	      su -c busybox chroot $CHROOT_DIR '/bin/su - root -c "apt install xwayland xvfb tigervnc-standalone-server tigervnc-common dbus-x11 tigervnc-xorg-extension fluxbox xterm -y"'
	  elif [ "$PACKAGEMANAGER" == "pacman" ]
	  then
	      su -c busybox chroot $CHROOT_DIR '/bin/su - root -c "pacman -S --noconfirm xorg-server-xvfb xwayland tigervnc dbus fluxbox xterm"'
	fi
fi

	
su -c busybox chroot $CHROOT_DIR "/bin/su - $USRNAME -c '/home/$USRNAME/scripts/install_vnc.sh'"
	
}


#function that update all setup files
update_setup(){

if [ -d ~/Chroot-Installer ]
then
	git -C ~/Chroot-Installer pull
	rm -rf $SETUP_DIR
	cp -r ~/Chroot-Installer/setup $CONFIG_DIR
	cp ~/Chroot-Installer/chroot-installer $SETUP_DIR
else
	git clone https://github.com/Pipetto-crypto/Chroot-Installer.git ~/Chroot-Installer
	rm -rf $SETUP_DIR
	cp -r ~/Chroot-Installer/setup $CONFIG_DIR
	cp ~/Chroot-Installer/chroot-installer $SETUP_DIR
fi 

	
}

install(){

echo -e "$RED""\nWARNING: THIS SCRIPT IS IN EARLY DEVELOPMENT AND IT HAS ONLY REPORTED WORKING ON ANDROID VERSIONS NEWER THAN 10. USE AT YOUR OWN RISK"
echo -e "$RED""\nWARNING: TERMUX:X11 APP MAY NOT WORK IN A CHROOT DEPENDING ON YOUR ANDROID VERSION. NO ISSUES WILL BE ACCEPTED ABOUT TERMUX:X11 AS THEY AREN'T RELATED TO THIS SCRIPT""$WHITE"
echo -e "$RED""\nWARNING: THE REMOVE FUNCTION PROVIDED BY THIS SCIRPT IS STILL INCOMPLETE AND COULD POTENTIALLY WIPE YOUR ENTIRE DEVICE.I AM NOT RESPONSIBLE FOR ANY IMPROPER USE OF IT" "$WHITE"
echo -e "$RED""\nWARNING: THIS SCRIPT ALLOWS THE INSTALLATION OF FOUR DISTRIBUTIONS BUT ONLY UBUNTU AND DEBIAN ARE SUPPORTED WORKING COMPLETELY FOR NOW." "$WHITE"
sleep 4
clear

#create the various config directories if they don't exist
mkdir -p $CONFIG_DIR
mkdir -p $CONTAINERS_DIR
mkdir -p $CACHED_ROOTFS_DIR

#update necessary setup files
update_setup

#check if the container is valid and in case ask if the user wants to recreate it
if [ -f $CONFIG_FILE ]
then
    USRNAME=$(cat $CONFIG_FILE | awk -F '='  '/USERNAME/{print $2}')
    INSPATH=$(cat $CONFIG_FILE | awk -F '=' '/INSPATH/{print $2}')
    if [ "$USRNAME" == "" ] || [ "$INSPATH" == "" ]
    then
        echo -e "This container seems to exist but it looks empty, so I will recreate it"
    else
        read -p "This container already exists, do you want me to recreate it [y|n]: " CHOICE
        if [ "$CHOICE" == "n" ]
        then
        	echo -e "\nI will leave then"
        	exit
        fi
    fi
fi

#based on options and arguments, set the right rootfs variable
if [ "${argslist[3]}" == "--custom" ]
then
	echo -e "\nUsing user selected rootfs"
	ROOTFS=${argslist[4]}
elif [ "${argslist[3]}" == "debian" ]
then
	echo -e "\nDownloading debian rootfs"
	if [ ! -f $CACHED_ROOTFS_DIR/$DEBIAN_ROOTFS ]
	then
		megadl https://mega.nz/file/cV5ClJrb#h5UvcIdiLq2zFncGYBe3lBL3QjauJFmLupu2faKvFUY --path=$CACHED_ROOTFS_DIR
	fi
	ROOTFS=$CACHED_ROOTFS_DIR/$DEBIAN_ROOTFS
elif [ "${argslist[3]}" == "ubuntu" ]
then
	if [ ! -f $CACHED_ROOTFS_DIR/$UBUNTU_ROOTFS ]
	then
		wget http://cdimage.ubuntu.com/ubuntu-base/releases/jammy/release/$UBUNTU_ROOTFS -P $CACHED_ROOTFS_DIR
	fi
	ROOTFS=$CACHED_ROOTFS_DIR/$UBUNTU_ROOTFS
elif [ "${argslist[3]}" == "manjaro" ]
then
	if [ ! -f $CACHED_ROOTFS_DIR/$MANJARO_ROOTFS ]
    then
         wget https://github.com/manjaro-arm/rootfs/releases/download/20230220/$MANJARO_ROOTFS -P $CACHED_ROOTFS_DIR
    fi
    ROOTFS=$CACHED_ROOTFS_DIR/$MANJARO_ROOTFS
elif [ "${argslist[3]}" == "arch" ]
then
	if [ ! -f $CACHED_ROOTFS_DIR/$ARCH_ROOTFS ]
	then
		wget http://os.archlinuxarm.org/os/$ARCH_ROOTFS -P $CACHED_ROOTFS_DIR
	fi
	ROOTFS=$CACHED_ROOTFS_DIR/$ARCH_ROOTFS		 
else
	echo -e "No valid distro or rootfs specified, exiting"
	exit
fi


echo -e "\nInitialization installation of the rootfs\n"


su -c mkdir -p $CHROOT_DIR
su -c chown 755 $CHROOT_DIR
touch $CONFIG_FILE

read -p "Select an installation method: " INSMETHOD


if [ "$INSMETHOD" == "file" ]
then
	make_image

else
	
	make_folder
fi

echo -e "\nMounting the container"

if findmnt $CHROOT_DIR >/dev/null
then
	su -c umount -d -l $CHROOT_DIR
fi
#verify installation method then mount it based on it
if [ "$INSMETHOD" == "file" ] 
then
	su -c busybox mount -o loop $INSPATH $CHROOT_DIR
else
#for folder method mount bind it in another directory so we can remount it with proper permissions
	su -c busybox mount --bind $INSPATH $CHROOT_DIR
	su -c busybox mount -o remount,bind,suid,exec $CHROOT_DIR
fi 
for i in dev proc sys dev/pts dev/tty
do
	su -c busybox mount --bind /$i $CHROOT_DIR/$i
done

first_setup

#check if -d option is present
for i in ${argslist[@]}
do
  if [ "$i" == "-d" ]
  then
  		echo -e "\nInstalling a DE\n"
		install_de
	fi
done
#check if -b option is present
for i in ${argslist[@]}
do
	if [ "$i" == "-b" ]
  	then #if manjaro or arch installation, installbonly box64
  		if [ "$PACKAGEMANAGER" == "pacman" ]
  		then
        	echo -e "\nInstalling wine,box64\n"        
         	su -c busybox chroot $CHROOT_DIR "/bin/su - $USRNAME -c 'source /home/$USRNAME/scripts/install_box_arch.sh'"
		else
        	echo -e "\nInstalling wine,box86,box64\n"        
        	su -c busybox chroot $CHROOT_DIR "/bin/su - $USRNAME -c '/home/$USRNAME/scripts/install_box.sh'"
		fi
		#check if kernel has binfmt_misc support and in case install right dependencies 
		if [ -d /proc/sys/fs/binfmt_misc ] && [ "$PACKAGEMANAGER" == "apt" ]
		then
             su -c busybox mount --bind /proc/sys/fs/binfmt_misc $CHROOT_DIR/proc/sys/fs/binfmt_misc
          	 echo -e "\nInstalling binfmt entries"
          	 su -c busybox chroot $CHROOT_DIR "/bin/su - root -c 'apt install binfmt-support -y'"
             su -c cp $INITIAL_CONFIGS_DIR/box86 $INITIAL_CONFIGS_DIR/box64  $CHROOT_DIR/usr/share/binfmts
          	 su -c busybox chroot $CHROOT_DIR "/bin/su - root -c '/usr/sbin/update-binfmts --import'"
        fi
     fi
done

echo -e "Unpacking GPU-acceleration ready Mesa libs, copying gpuswitch script"

su -c rm -rf $CHROOT_DIR/home/$USRNAME/mesa32 $CHROOT_DIR/home/$USRNAME/mesa64
su -c busybox tar -Jxvf $EXTRA_CONFIGS_DIR/mesa32-turnip-zink-virgl-23.2.0.tar.xz -C $CHROOT_DIR/home/$USRNAME
su -c busybox tar -Jxvf $EXTRA_CONFIGS_DIR/mesa64-turnip-zink-virgl-23.2.0.tar.xz -C $CHROOT_DIR/home/$USRNAME

echo -e "\nFirst setup completed, stopping the chroot"

su -c umount -d -l $CHROOT_DIR

echo -e "\nCopying the chroot-installer script to PATH"

cp $SETUP_DIR/chroot-installer $PATH
chmod +x $PATH/chroot-installer

}

remove(){

index=1
#get and check all arguments after remove
for i in ${argslist[@]}
do
	if (( index>1 ))
	then
		CONFIG_FILE=$CONTAINERS_DIR/$i.conf
		if [ -f $CONFIG_FILE ]
		then
			INSPATH=$(cat $CONFIG_FILE | awk -F '=' '/INSPATH/{print $2}')
			echo -e "Unmounting any running container"
			su -c umount -d -l $CHROOT_DIR >/dev/null 2>&1
			su -c umount -d -l $CHROOT_DIR/media/* 2>&1
			echo -e "Deleting the selected container"
			su -c rm -rf $INSPATH
			su -c rm -rf $CONFIG_FILE
		else
			printf "The container %s doesn't exist, please specify a valid container\n" "$i"
		fi
	fi
	index=$((index+1))
done
	
}

list (){

#default status is not installed
debianstatus="$RED""NotInstalled""$WHITE"
manjarostatus="$RED""NotInstalled""$WHITE"
ubuntustatus="$RED""NotInstalled""$WHITE"
archstatus="$RED""NotInstalled""$WHITE"

index=1
#check all configs and save installed distros paramaters in an array
for conf in $CONTAINERS_DIR/*
do
	distro="$(cat $conf | gawk -F "=" '/DISTRO/{print $2}')"
	installedistros[$index]="$distro"
	index=$((index+1))
done

#if a distro is installed change status
for dist in ${installedistros[@]}
do
	case "$dist" in
	debian)
			debianstatus="$GREEN""Installed""$WHITE"
			;;
	ubuntu)
			ubuntustatus="$GREEN""Installed""$WHITE"
			;;
	manjaro)
			manjarostatus="$GREEN""Installed""$WHITE"
			;;
	arch)
			archstatus="$GREEN""Installed""$WHITE"
	esac
done
			
			

printf "\n%-s%23s\n" "Available distros:" "Status:"
echo -e "\nDebian 11 Bullseye                $debianstatus"
echo -e "Ubuntu 22.04 JammyFish            $ubuntustatus"
echo -e "Manjaro ARM64                     $manjarostatus"
echo -e "Arch                              $archstatus"

}

#TODO
update(){

#git clone 
#chmod +x chroot-installer
#mv chroot-installer $PATH

echo -e "TODO"
	
}


#version function that simply prints version number

version(){

echo -e "chroot-installer v0.1"
	
}

#help function
help(){


column1=(
"install" 
"remove" 
"list" 
"update" 
"help" 
"--custom" 
"-d" 
"-b" 
"--version")
column2=(
"install distro specified by distro argument in container containername" 
"remove the container specified by argument containername alongside all of its files" 
"list available distros and their installation status" 
"update this script then exit" 
"print this help message then exit" 
"can be specified alongside install and in place of argument distro for inputting custom rootfses through the argument path, only debian-based rootfses are guaranteed to work" 
"install a desktop environment of your choice alongside VNC, disabled by default" 
"install box86 and box64 alongside wine to run x86 apps,disabled by default and only available for debian-based distros"
"print this script version then exit"
)
argcolumn1=("containername" "path" "distro")
argcolumn2=("arbitrary container name of user's choice" "full path to the custom rootfs, to use only with --custom option" "name of the distro to install" )

echo -e "TODO"
}

if [[ "$(su -c busybox)" =~ "not found" ]]
then
    echo "Busybox not available,please install busybox before using this script"
    exit 0
fi

if (( $(echo "$ANDROIDVERSION>12" | bc -l) ))
then
    if [ "$(su -c settings get global settings_enable_monitor_phantom_procs)" == "true" ]
    then
        echo -e "Android 12.1 or greater detected, disabling phantom processes killer"
        su -c settings put global settings_enable_monitor_phantom_procs false
    fi
fi

if [ "$(findmnt -o FS-OPTIONS /data | awk -F "," '{print $1}' | tail -n 1)" == "ro" ]
then
	echo -e "\nData partition is mounted as read-only, trying to mount it as rw but depending on the phone's manufacturer this operation may fail"
	su -c busybox mount -o rw,remount /data
	if [ "$(findmnt -o FS-OPTIONS /data | awk -F "," '{print $1}' | tail -n 1)" == "ro" ]
	then
		echo -e "\nOperation failed, exiting"
		exit
	else
		echo -e "\nOperation succeeded, continuing"
	fi
fi

	
while [ True ]
do
	if [ "${argslist[1]}" == "install" ]
	then
		install
		break
	elif [ "${argslist[1]}" == "remove" ]
	then
		remove
		break
    elif [ "${argslist[1]}" == "stop" ]
	then
		stop
		break
	elif [ "${argslist[1]}" == "start" ]
    then
    	start 
		break
	elif [ "${argslist[1]}" == "restart" ]
	then
		stop
		start
		break
	elif [ "${argslist[1]}" == "list-containers" ]
	then
		list-containers
		break
	elif [ "${argslist[1]}" == "help" ]
	then
		help
		break
	elif [ "${argslist[1]}" == "edit-conf" ]
	then
		edit-config
		break
	elif [ "${argslist[1]}" == "update" ]
	then
		update
		break
	elif [ "${argslist[1]}" == "list" ]
	then
		list
		break
	elif [ "${argslist[1]}" == "--version" ]
	then
		version
		break
	else
		help
		break
	fi
done

